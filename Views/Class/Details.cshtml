@{
    ViewBag.MenuHead = "Management";
    ViewBag.Controller = "Class";
    ViewBag.Action = "Details";
    ViewBag.Title = "Class Details";
    int number = 1;
    Class classModel = Model.Classes.First();
}

@using GWOTimetable.Models;
@using System.Security.Claims
@model Workspace
<div class="card card-info card-outline">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h3 class="card-title"><i class="fas fa-circle-info"></i> &ensp;Class Details</h3>

        <div class="ml-auto">
            <button class="btn btn-outline-danger btn-sm delete-class-button" data-class-id="@classModel.ClassId"
                data-class-name="@classModel.ClassName" data-class-desc="@classModel.Description" data-toggle="modal"
                data-target="#deleteClassModal" id="deleteClassButton" hidden>
                <i class="fas fa-trash"></i>&nbsp; Delete
            </button>
            <button type="button" id="saveClassButton" class="btn btn-outline-success btn-sm ml-1" hidden>
                <i class="fas fa-save"></i>&nbsp; Save
            </button>
            <button type="button" id="closeEditButton" class="btn btn-outline-info btn-sm ml-1" hidden>
                <i class="fas fa-xmark"></i>&nbsp; Close
            </button>
            <button type="button" id="editClassButton" class="btn btn-outline-info btn-sm ml-1">
                <i class="fas fa-edit"></i>&nbsp; Edit
            </button>

        </div>
    </div>

    <div class="card-body">
        <div class="form-group ">
            <label>Workspace</label>
            <select class="form-control select2bs4 select2-hidden-accessible" disabled style="width: 100%;">
                <option value="0">@User.FindFirstValue("WorkspaceName")</option>
            </select>
        </div>
        <div class=" row">
            <div class="form-group col-md-6">
                <label>Class Name </label>
                <input type="text" class="form-control" value="@classModel.ClassName" id="className" maxlength="100"
                    disabled>
            </div>


            <div class="form-group col-md-3">
                <label>Created At </label>
                <input type="text" class="form-control" value="@classModel.CreatedAt" disabled>
            </div>


            <div class="form-group col-md-3">
                <label>Updated At </label>
                <input type="text" class="form-control"
                    value="@(classModel.UpdatedAt.HasValue ? classModel.UpdatedAt.ToString() : "Not updated yet.")"
                    disabled>
            </div>

        </div>
        <div class=" row">
            <div class="form-group col-md-12">
                <label>Description</label>
                <textarea class="form-control" id="classDescription" rows="2" maxlength="250" disabled>
                    @if (string.IsNullOrEmpty(Model.Description))
                    {
                        @("No description.".Trim())
                    }
                    else
                    {
                       @(classModel.Description.Trim())
                    }
                </textarea>
            </div>
        </div>
    </div>
</div>


<div class="card card-success card-outline mt-4">
    <div class="card-header d-flex align-items-center">
        <h3 class="card-title"><i class="fas fa-book"></i>&nbsp; Courses</h3>

        <button type="button" class="btn btn-outline-success btn-sm ml-auto" data-toggle="modal"
            data-target="#addCourseModal">
            <i class="fas fa-plus"></i>&nbsp; Add Course
        </button>

    </div>
    <div class="card-body p-0 table-responsive">


        <table class="table table-hover table-striped">
            <thead>
                <tr>
                    <th>Number</th>
                    <th>Course Code</th>
                    <th>Course</th>
                    <th>Educator</th>
                    <th>Classroom</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var c in classModel.ClassCourses)
                {
                    <tr>
                        <td>
                            @number

                        </td>
                        <td>@c.Course.CourseCode</td>
                        <td>@c.Course.CourseName</td>
                        <td>@c.Educator.Title @c.Educator.FirstName @c.Educator.LastName</td>
                        <td>@c.Classroom.ClassroomName</td>
                        <td>
                            <button class="btn btn-info btn-sm update-course-button mb-2 mb-xl-0" data-classcourse-id="@c.ClassCourseId"
                                data-course-id="@c.Course.CourseId" data-educator-id="@c.Educator.EducatorId"
                                data-classroom-id="@c.Classroom.ClassroomId" data-toggle="modal"
                                data-target="#updateCourseModal">
                                <i class="fas fa-edit"></i>
                            </button>

                            <button class="btn btn-danger btn-sm delete-course-button" data-course-id="@c.ClassCourseId"
                                data-course-code="@c.Course.CourseCode" data-course-name="@c.Course.CourseName"
                                data-educator-name="@c.Educator.Title @c.Educator.FirstName @c.Educator.LastName"
                                data-classroom="@c.Classroom.ClassroomName" data-toggle="modal"
                                data-target="#deleteCourseModal">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                    number++;
                }
            </tbody>

        </table>


    </div>
</div>

<div class="row mt-4">
    <div class="col-md-9">
        <div class="card card-gray card-outline">
            <div class="card-body p-0 table-responsive" id="constraintTableBody">
                <div class="text-center py-5">
                    <i class="fas fa-calendar-days fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Please select a course from the options panel to view the timetable</h5>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-3">
        <div class="card card-gray card-outline">
            <div class="card-header d-flex align-items-center">
                <h3 class="card-title pt-1 pb-1"><i class="fas fa-calendar-days"></i>&nbsp; Options</h3>
            </div>
            <div class="card-body">
                @foreach (var c in classModel.ClassCourses)
                {
                    <button type="button" class="btn btn-outline-primary btn-block constraint-option-button mb-2" 
                            data-classcourse-id="@c.ClassCourseId" 
                            data-class-id="@classModel.ClassId"
                            data-course-code="@c.Course.CourseCode"
                            data-course-name="@c.Course.CourseName"
                            data-classroom="@c.Classroom.ClassroomName">
                        (@c.Course.CourseCode) - @c.Classroom.ClassroomName<br>
                        @c.Course.CourseName
                    </button>
                }
                <button type="button" class="btn btn-outline-danger btn-block pt-3 pb-3 constraint-option-button" 
                        data-classcourse-id="0" 
                        data-class-id="@classModel.ClassId"
                        data-course-code="CLOSE"
                        data-course-name="Close Time Slot"
                        data-classroom="">Close</button>
            </div>
        </div>
    </div>
</div>

    <div class="modal fade" id="addCourseModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success">
                    <h5 class="modal-title"><i class="fas fa-circle-plus"></i>&nbsp; Add New Course</h5>
                    <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group ">
                        <label>Workspace</label>
                        <select class="form-control select2bs4 select2-hidden-accessible" style="width: 100%;">
                            <option value="0">@User.FindFirstValue("WorkspaceName")</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Class</label>
                        <select class="form-control select2bs4 select2-hidden-accessible" id="classSelect" disabled>
                            <option value="@classModel.ClassId">@classModel.ClassName</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Course</label>
                        <select class="form-control select2bs4 select2-hidden-accessible" id="courseSelect">
                            <option value="0">Select Course</option>
                            @foreach (var course in Model.Courses)
                            {
                                <option value="@course.CourseId">(@course.CourseCode) @course.CourseName</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Educator</label>

                        <select class="form-control select2bs4 select2-hidden-accessible" id="educatorSelect">
                            <option value="0">Select Educator</option>
                            @foreach (var educator in Model.Educators)
                            {
                                <option value="@educator.EducatorId">@educator.Title @educator.FirstName @educator.LastName
                                </option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Classroom</label>
                        <select class="form-control select2bs4 select2-hidden-accessible" id="classroomSelect">
                            <option value="0">Select Classroom</option>
                            @foreach (var classroom in Model.Classrooms)
                            {
                                <option value="@classroom.ClassroomId">@classroom.ClassroomName</option>
                            }
                        </select>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" id="saveNewCourseButton">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="updateCourseModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-info">
                    <h5 class="modal-title"><i class="fas fa-edit"></i>&nbsp; Update Course</h5>
                    <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group ">
                        <label>Workspace</label>
                        <select class="form-control select2bs4 select2-hidden-accessible" style="width: 100%;">
                            <option value="0">@User.FindFirstValue("WorkspaceName")</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Class</label>
                        <select class="form-control select2bs4 select2-hidden-accessible" id="updateclassSelect" disabled>
                            <option value="@classModel.ClassId">@classModel.ClassName</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Course</label>
                        <select class="form-control select2bs4 select2-hidden-accessible" id="updatecourseSelect">
                            <option value="0">Select Course</option>
                            @foreach (var course in Model.Courses)
                            {
                                <option value="@course.CourseId">(@course.CourseCode) @course.CourseName</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Educator</label>

                        <select class="form-control select2bs4 select2-hidden-accessible" id="updateeducatorSelect">
                            <option value="0">Select Educator</option>
                            @foreach (var educator in Model.Educators)
                            {
                                <option value="@educator.EducatorId">@educator.Title @educator.FirstName @educator.LastName
                                </option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Classroom</label>
                        <select class="form-control select2bs4 select2-hidden-accessible" id="updateclassroomSelect">
                            <option value="0">Select Classroom</option>
                            @foreach (var classroom in Model.Classrooms)
                            {
                                <option value="@classroom.ClassroomId">@classroom.ClassroomName</option>
                            }
                        </select>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" id="confirmUpdateCourseButton" data-classcourse-id="">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="deleteClassModal" tabindex="-1" role="dialog" aria-labelledby="deleteClassModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteClassModalLabel"><i class="fas fa-exclamation-circle"></i>&nbsp;
                        Delete
                        Confirmation</h5>
                    <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <dt>Are you sure you want to delete this class?</dt>
                    <dd>All settings related to this class will be deleted.</dd>
                    <br>
                    <dl class="row">
                        <dt class="col-sm-4">Class Name</dt>
                        <dd class="col-sm-8" id="deleteClassName"></dd>
                        <dt class="col-sm-4">Class Description</dt>
                        <dd class="col-sm-8" id="deleteClassDesc"></dd>

                    </dl>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" data-class-id=""
                        id="confirmDeleteClassButton">Delete</button>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="deleteCourseModal" tabindex="-1" role="dialog" aria-labelledby="deleteCourseModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteCourseModalLabel"><i class="fas fa-exclamation-circle"></i>&nbsp;
                        Delete
                        Confirmation</h5>
                    <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <dt>Are you sure you want to delete this course?</dt>
                    <dd>All settings related to this course will be deleted.</dd>
                    <br>
                    <dl class="row">
                        <dt class="col-sm-4">Course Code</dt>
                        <dd class="col-sm-8" id="deleteCourseCode"></dd>
                        <dt class="col-sm-4">Course Name</dt>
                        <dd class="col-sm-8" id="deleteCourseName"></dd>
                        <dt class="col-sm-4">Educator Name</dt>
                        <dd class="col-sm-8" id="deleteCourseEducatorName"></dd>
                        <dt class="col-sm-4">Classroom</dt>
                        <dd class="col-sm-8" id="deleteCourseClassroom"></dd>

                    </dl>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" data-classcourse-id=""
                        id="confirmDeleteCourseButton">Delete</button>
                </div>
            </div>
        </div>
    </div>

@section Scripts {

        <script>
            $(document).ready(function () {
                $('.select2').select2({
                }).on('select2:unselecting', function (e) {
                    $(this).val(null).trigger('change');
                });
            });
        </script>

        <script>
            $(document).ready(function () {
                $('.delete-class-button').on('click', function () {
                    const classId = $(this).data('class-id');
                    $('#deleteClassName').text($(this).data('class-name'));
                    $('#deleteClassDesc').text($(this).data('class-desc'));

                    $('#confirmDeleteClassButton').data('class-id', classId);
                });
                $('#confirmDeleteClassButton').on('click', function () {

                    const classId = parseInt($(this).data('class-id'));

                    const classData = {
                        ClassId: classId
                    };

                    $.ajax({
                        url: '@Url.Action("DeleteClass", "Class")',
                        type: 'DELETE',
                        contentType: 'application/json',
                        data: JSON.stringify(classData),
                        success: function (response) {
                            console.log('Delete class response:', response);
                            Swal.fire({
                                icon: 'success',
                                title: "Class deleted successfully.",
                                showConfirmButton: false,
                                timer: 2000
                            }).then(() => {
                                location.reload();
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error('Delete class error:', {
                                status: status,
                                error: error,
                                response: xhr.responseText
                            });
                            var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }

                            Swal.fire({
                                toast: true,
                                icon: 'error',
                                title: errorMessage,
                                position: 'top',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    });
                });
            });

        </script>

        <script>
            $(document).ready(function () {
                $('.update-course-button').on('click', function () {
                    const classcourseId = $(this).data('classcourse-id');
                    $('#updateeducatorSelect').val($(this).data('educator-id')).trigger('change');
                    $('#updateclassSelect').val(@classModel.ClassId).trigger('change');
                    $('#updatecourseSelect').val($(this).data('course-id')).trigger('change');
                    $('#updateclassroomSelect').val($(this).data('classroom-id')).trigger('change');

                    $('#confirmUpdateCourseButton').data('classcourse-id', classcourseId);
                });
                $('#confirmUpdateCourseButton').on('click', function () {

                    var courseData = {
                        ClassCourseId: parseInt($(this).data('classcourse-id')),
                        ClassId: @classModel.ClassId,
                        CourseId: parseInt($('#updatecourseSelect').val()),
                        ClassroomId: parseInt($('#updateclassroomSelect').val()),
                        EducatorId: parseInt($('#updateeducatorSelect').val())
                    };

                    console.log('Update course data:', courseData);

                    $.ajax({
                        url: '@Url.Action("UpdateCourse", "ClassCourse")',
                        type: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify(courseData),
                        success: function (response) {
                            console.log('Update course response:', response);
                            Swal.fire({
                                icon: 'success',
                                title: "Course updated successfully.",
                                showConfirmButton: false,
                                timer: 2000
                            }).then(() => {
                                location.reload();
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error('Update course error:', {
                                status: status,
                                error: error,
                                response: xhr.responseText
                            });
                            var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }

                            Swal.fire({
                                toast: true,
                                icon: 'error',
                                title: errorMessage,
                                position: 'top',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    });
                });
            });

        </script>

        <script>
            $(document).ready(function () {
                $('#editClassButton').click(function () {
                    $('#classCode,#className,#classDescription').removeAttr('disabled');
                    $('#saveClassButton,#deleteClassButton,#closeEditButton').removeAttr('hidden');
                    $('#editClassButton').attr('hidden', true);
                });


                $('#closeEditButton').click(function () {
                    $('#classCode,#className,#classDescription').attr('disabled', true);
                    $('#saveClassButton,#deleteClassButton,#closeEditButton').attr('hidden', true);
                    $('#editClassButton').removeAttr('hidden');
                });

                $('#saveClassButton').click(function () {
                    var classData = {
                        ClassId: parseInt('@classModel.ClassId'),
                        ClassName: $('#className').val(),
                        Description: $('#classDescription').val()
                    };

                    console.log('Save class data:', classData);

                    $.ajax({
                        url: '@Url.Action("UpdateClass", "Class")',
                        type: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify(classData),
                        success: function (response) {
                            console.log('Save class response:', response);
                            Swal.fire({
                                icon: 'success',
                                title: "Class updated successfully.",
                                showConfirmButton: false,
                                timer: 2000
                            }).then(() => {
                                location.reload();
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error('Save class error:', {
                                status: status,
                                error: error,
                                response: xhr.responseText
                            });
                            var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }

                            Swal.fire({
                                toast: true,
                                icon: 'error',
                                title: errorMessage,
                                position: 'top',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    });
                });

            });
        </script>

        <script>
            $(document).ready(function () {
                $('#saveNewCourseButton').click(function () {
                    var courseData = {
                        ClassId: parseInt($('#classSelect').val()),
                        CourseId: parseInt($('#courseSelect').val()),
                        ClassroomId: parseInt($('#classroomSelect').val()),
                        EducatorId: parseInt($('#educatorSelect').val())
                    };

                    console.log('Save new course data:', courseData);

                    $.ajax({
                        url: '@Url.Action("NewCourse", "ClassCourse")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(courseData),
                        success: function (response) {
                            console.log('Save new course response:', response);
                            Swal.fire({
                                icon: 'success',
                                title: "Course added successfully.",
                                showConfirmButton: false,
                                timer: 2000
                            }).then(() => {
                                location.reload();
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error('Save new course error:', {
                                status: status,
                                error: error,
                                response: xhr.responseText
                            });
                            var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }

                            Swal.fire({
                                toast: true,
                                icon: 'error',
                                title: errorMessage,
                                position: 'top',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    });

                });
            });
        </script>

        <script>
            $(document).ready(function () {
                $('.delete-course-button').on('click', function () {
                    const courseId = $(this).data('course-id');
                    $('#deleteCourseCode').text($(this).data('course-code'));
                    $('#deleteCourseName').text($(this).data('course-name'));
                    $('#deleteCourseEducatorName').text($(this).data('educator-name'));
                    $('#deleteCourseClassroom').text($(this).data('classroom'));

                    $('#confirmDeleteCourseButton').data('course-id', courseId);


                });
                $('#confirmDeleteCourseButton').on('click', function () {

                    const courseId = parseInt($(this).data('course-id'));

                    const courseData = {
                        ClassCourseId: courseId
                    };

                    console.log('Delete course data:', courseData);

                    $.ajax({
                        url: '@Url.Action("DeleteCourse", "ClassCourse")',
                        type: 'DELETE',
                        contentType: 'application/json',
                        data: JSON.stringify(courseData),
                        success: function (response) {
                            console.log('Delete course response:', response);
                            Swal.fire({
                                icon: 'success',
                                title: "Course deleted successfully.",
                                showConfirmButton: false,
                                timer: 2000
                            }).then(() => {
                                location.reload();
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error('Delete course error:', {
                                status: status,
                                error: error,
                                response: xhr.responseText
                            });
                            var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }

                            Swal.fire({
                                toast: true,
                                icon: 'error',
                                title: errorMessage,
                                position: 'top',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    });
                });
            });

        </script>

        <script>
            // Global değişken olarak current class ID'sini tanımla
            const currentClassId = @classModel.ClassId;
            var selectedConstraintButton;

            // Kısıtlama fonksiyonları - partial view'dan bağımsız olarak ana sayfada tanımlı olması gerekiyor
            var constraintsToAdd = [];
            var constraintsToRemove = [];
            var hasUnsavedChanges = false;
            
            // Partial view yüklendikten sonra çağrılacak, kısıtlama tablosunu başlatır
            function initializeConstraintTable() {
                console.log("Constraint table initialized");
                
                // Varsayılan olarak Close constraint tipi seçili
                if (!selectedConstraintButton) {
                    selectedConstraintButton = { data: function() { return { type: 'closed' }; } };
                }
            }
            
            // Yerel olarak constraint ekleme
            function AddConstraintLocal(element, dayId, lessonId) {
                console.log("AddConstraintLocal called for day:", dayId, "lesson:", lessonId);
                
                // Seçili kısıtlama tipine göre ClassCourseId değerini belirle
                const classCourseId = selectedConstraintButton ? parseInt(selectedConstraintButton.data('classcourse-id')) : 0;
                const constraintType = selectedConstraintButton ? selectedConstraintButton.data('type') : 'closed';
                console.log("Seçili kısıtlama tipi:", constraintType, "ClassCourseId:", classCourseId);
                
                // Kısıtlama nesnesini oluştur
                const constraint = {
                    DayId: dayId,
                    LessonId: lessonId,
                    ClassId: currentClassId, 
                    ClassCourseId: classCourseId // Artık seçili butona göre değişiyor
                };
                
                console.log("Kısıtlama ekleniyor:", constraint);

                // Bu kısıtlamanın tam olarak silinmek için işaretlenip işaretlenmediğini kontrol et
                const removeIndex = constraintsToRemove.findIndex(item => 
                    item.DayId === dayId && item.LessonId === lessonId && item.ClassId === currentClassId
                );

                if (removeIndex > -1) {
                    // Silme için işaretlendiyse, işaretlemeyi kaldır
                    constraintsToRemove.splice(removeIndex, 1);
                    console.log("Silme işareti kaldırıldı");
                    
                    // Daha önce kaydedilmişse orijinal durumunu geri getir
                    const wasUnsaved = $(element).attr('data-was-unsaved') === 'true';
                    if (!wasUnsaved) {
                        // Kaydedilmiş bir kısıtlamaydı, görünümünü geri yükle
                        if (classCourseId === 0) {
                            // Kapalı (Closed) kısıtlama
                            $(element).css('background-color', '#ffe6e6');
                            $(element).text('Closed');
                        } else {
                            // Ders kısıtlaması
                            $(element).css('background-color', '#ADD8E6'); // Açık mavi
                            $(element).text(selectedConstraintButton.text());
                        }
                        $(element).attr('ondblclick', `RemoveConstraintLocal(this, ${dayId}, ${lessonId})`);
                        $(element).removeAttr('onclick onmouseover onmouseout data-was-unsaved data-removed-constraint');
                        $(element).attr('data-constraint-data', JSON.stringify(constraint)); // Kısıtlama verilerini geri yükle
                    } else {
                        // Hiç kaydedilmemiş, boş hücre durumuna geri döndür (burada nadiren gerçekleşir)
                        $(element).css('background-color', 'white').text('');
                        $(element).attr('onclick', `AddConstraintLocal(this, ${dayId}, ${lessonId})`);
                        $(element).attr('onmouseover', "this.style.background='#f5f5f5'");
                        $(element).attr('onmouseout', "this.style.background='white'");
                        $(element).removeAttr('ondblclick data-constraint-data data-was-unsaved data-removed-constraint');
                    }
                    $(element).removeAttr('data-unsaved');
                } else {
                    // constraintsToAdd listesinde zaten yoksa ekle
                    const existsInAdd = constraintsToAdd.some(item => 
                        item.DayId === dayId && item.LessonId === lessonId && item.ClassId === currentClassId
                    );
                    if (!existsInAdd) {
                        constraintsToAdd.push(constraint);
                        console.log("constraintsToAdd listesine kısıtlama eklendi");
                    }
                    
                    // Kaydedilmemiş kısıtlama için UI'yı güncelle
                    if (classCourseId === 0) {
                        // Kaydedilmemiş kapalı kısıtlama
                        $(element).css('background-color', '#FFD700'); // Altın sarısı renk
                        $(element).text('Closed');
                    } else {
                        // Kaydedilmemiş ders kısıtlaması
                        $(element).css('background-color', '#6FC276'); // Açık yeşil
                        $(element).text(selectedConstraintButton.text());
                    }
                    
                    $(element).attr('data-unsaved', 'true');
                    $(element).attr('ondblclick', `RemoveConstraintLocal(this, ${dayId}, ${lessonId})`);
                    $(element).removeAttr('onclick onmouseover onmouseout');
                    $(element).attr('data-constraint-data', JSON.stringify(constraint));
                    $(element).removeAttr('data-removed-constraint');
                }

                showUnsavedChanges();
            }
            
            // Yerel olarak constraint kaldırma
            function RemoveConstraintLocal(element, dayId, lessonId) {
                console.log("RemoveConstraintLocal called for day:", dayId, "lesson:", lessonId);
                
                var constraintData = {};
                try {
                    // Yerel olarak eklenen sınıf kısıtlamalarının başlangıçta tam verileri olmayabilir
                    constraintData = JSON.parse($(element).attr('data-constraint-data') || '{}');
                    constraintData.DayId = dayId;
                    constraintData.LessonId = lessonId;
                    constraintData.ClassId = currentClassId; // ClassId'nin ayarlandığından emin ol
                } catch (error) {
                    console.error("Kısıtlama verisi ayrıştırılırken hata:", error);
                    constraintData = {
                        DayId: dayId,
                        LessonId: lessonId,
                        ClassId: currentClassId,
                        ClassCourseId: 0 
                    };
                }

                console.log("Kısıtlama kaldırılıyor:", constraintData);
                
                const isUnsaved = $(element).attr('data-unsaved') === 'true';
                console.log("Kısıtlama kaydedilmemiş:", isUnsaved);
                
                if (isUnsaved) {
                    // Kaydedilmemiş bir kısıtlamayı kaldırma
                    constraintsToAdd = constraintsToAdd.filter(item => 
                        !(item.DayId === dayId && item.LessonId === lessonId && item.ClassId === currentClassId)
                    );
                    console.log("constraintsToAdd listesinden kaydedilmemiş kısıtlama kaldırıldı");
                } else {
                    // Kaydedilmiş bir kısıtlamayı kaldırma - zaten yoksa silme listesine ekle
                    const existsInRemove = constraintsToRemove.some(item => 
                        item.DayId === dayId && item.LessonId === lessonId && item.ClassId === currentClassId
                    );
                    if (!existsInRemove) {
                        constraintsToRemove.push(constraintData);
                        console.log("constraintsToRemove listesine kısıtlama eklendi");
                    }
                }

                // Potansiyel iptal için geçici bilgileri sakla
                $(element).attr('data-removed-constraint', JSON.stringify(constraintData));
                $(element).attr('data-was-unsaved', isUnsaved ? 'true' : 'false');

                // UI'yı boş hücre olarak güncelle
                $(element).css('background-color', 'white').text('');
                $(element).attr('onclick', `AddConstraintLocal(this, ${dayId}, ${lessonId})`);
                $(element).attr('onmouseover', "this.style.background='#f5f5f5'");
                $(element).attr('onmouseout', "this.style.background='white'");
                $(element).removeAttr('ondblclick data-constraint-data data-unsaved');
                
                showUnsavedChanges();
            }
            
            // Kaydedilmemiş değişiklikleri gösterme
            function showUnsavedChanges() {
                hasUnsavedChanges = constraintsToAdd.length > 0 || constraintsToRemove.length > 0;
                if (hasUnsavedChanges) {
                    $('#constraintChangeAlert').show();
                    $('#saveConstraintsButton').removeClass('btn-outline-success').addClass('btn-success');
                    $('#cancelChangesButton').removeClass('btn-outline-danger').addClass('btn-danger');
                } else {
                    $('#constraintChangeAlert').hide();
                    $('#saveConstraintsButton').removeClass('btn-success').addClass('btn-outline-success');
                    $('#cancelChangesButton').removeClass('btn-danger').addClass('btn-outline-danger');
                }
            }
            
            // Tüm değişiklikleri kaydetme
            function saveAllChanges() {
                if (!hasUnsavedChanges) {
                    return;
                }
                
                // Yükleniyor göstergesini göster
                $('.spinner-overlay').css('display', 'flex');

                // Daha detaylı hata ayıklama bilgisi ekle
                console.log("Kaydedilecek ekleme listesi:", JSON.stringify(constraintsToAdd));
                console.log("Kaydedilecek silme listesi:", JSON.stringify(constraintsToRemove));

                var changes = {
                    ClassId: currentClassId, 
                    ConstraintsToAdd: constraintsToAdd,
                    ConstraintsToRemove: constraintsToRemove
                };

                console.log("Sınıf değişiklikleri kaydediliyor:", JSON.stringify(changes));

                $.ajax({
                    url: '/Constraint/SaveAllClassConstraints',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(changes),
                    success: function(response) {
                        $('.spinner-overlay').hide();
                        console.log("Sunucu yanıtı:", response);
                        
                        if (response && response.success) {
                            let swalOptions = {
                                icon: 'success',
                                title: 'Başarılı!',
                                text: response.message || 'Değişiklikler başarıyla kaydedildi.',
                                confirmButtonText: 'Tamam'
                            };
                            
                            // Kaydedilen değişiklikler için UI'yı güncelle
                            $('td[data-unsaved="true"]').each(function() {
                                const $cell = $(this);
                                const cellData = JSON.parse($cell.attr('data-constraint-data') || '{}');
                                
                                // Constraint tipine göre doğru rengi ayarla
                                if (cellData.ClassCourseId === 0) {
                                    // Kapalı kısıtlama için
                                    $cell.css('background-color', '#ffe6e6');
                                    $cell.text('Closed'); 
                                } else {
                                    // Ders kısıtlaması için
                                    $cell.css('background-color', '#ADD8E6');
                                    // Ders adını bulmaya çalış
                                    const courseButton = $(`.constraint-option-button[data-classcourse-id="${cellData.ClassCourseId}"]`);
                                    if (courseButton.length) {
                                        $cell.text(courseButton.text());
                                    } else {
                                        $cell.text('Course');
                                    }
                                }
                                
                                $cell.removeAttr('data-unsaved');
                            });
                            
                            // Listelerimizi temizle
                            constraintsToAdd = [];
                            constraintsToRemove = [];
                            
                            // Bildirim göster
                            Swal.fire(swalOptions);
                            
                            // UI'yı güncelle
                            showUnsavedChanges();
                        } else {
                            // Hata durumu
                            let errorMessages = '';
                            if (response && response.errors && response.errors.length > 0) {
                                errorMessages = '<ul>' + response.errors.map(err => `<li>${err}</li>`).join('') + '</ul>';
                            }
                            
                            Swal.fire({
                                icon: 'error',
                                title: 'Hata',
                                html: (response && response.message ? response.message : 'Değişiklikler kaydedilirken bir hata oluştu.') + 
                                    (errorMessages ? '<br>' + errorMessages : ''),
                                confirmButtonText: 'Tamam'
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        $('.spinner-overlay').hide();
                        console.error("AJAX hatası:", status, error);
                        
                        // XHR yanıtını ve hata detaylarını yazdır
                        console.error("XHR yanıtı:", xhr.responseText);
                        
                        let errorMessage = "Sunucuyla iletişim kurarken bir hata oluştu.";
                        
                        // XHR yanıt içeriğini ayrıştırmaya çalış
                        try {
                            const jsonResponse = JSON.parse(xhr.responseText);
                            if (jsonResponse && jsonResponse.message) {
                                errorMessage = jsonResponse.message;
                            }
                        } catch (e) {
                            // JSON ayrıştırma hatası, varsayılan mesajı kullan
                            console.error("JSON ayrıştırma hatası:", e);
                        }
                        
                        Swal.fire({
                            icon: 'error',
                            title: 'Hata',
                            text: errorMessage,
                            confirmButtonText: 'Tamam'
                        });
                    }
                });
            }
            
            // Değişiklikleri iptal etme
            function cancelChanges() {
                if (!hasUnsavedChanges) {
                    return;
                }
                
                // İptal etmeden önce kullanıcıya sor
                Swal.fire({
                    title: 'Değişiklikleri İptal Et?',
                    text: "Tüm kaydedilmemiş değişiklikler kaybolacak. Devam etmek istiyor musunuz?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Evet, iptal et',
                    cancelButtonText: 'Hayır'
                }).then((result) => {
                    if (result.isConfirmed) {
                        console.log("Değişiklikler iptal ediliyor");
                        
                        // constraintsToAdd listesindeki tüm hücreler için değişiklikleri geri al
                        for (const constraint of constraintsToAdd) {
                            const cell = $(`td[data-day-id="${constraint.DayId}"][data-lesson-id="${constraint.LessonId}"]`);
                            if (cell.length) {
                                // Hücreyi orijinal durumuna geri döndür
                                cell.css('background-color', 'white').text('');
                                cell.attr('onclick', `AddConstraintLocal(this, ${constraint.DayId}, ${constraint.LessonId})`);
                                cell.attr('onmouseover', "this.style.background='#f5f5f5'");
                                cell.attr('onmouseout', "this.style.background='white'");
                                cell.removeAttr('ondblclick data-constraint-data data-unsaved');
                            }
                        }
                        
                        // constraintsToRemove listesindeki tüm hücreler için değişiklikleri geri al
                        for (const constraint of constraintsToRemove) {
                            const cell = $(`td[data-day-id="${constraint.DayId}"][data-lesson-id="${constraint.LessonId}"]`);
                            if (cell.length) {
                                // Kaldırılmış constraint özniteliğini kontrol et
                                const removedConstraintData = cell.attr('data-removed-constraint');
                                if (removedConstraintData) {
                                    const removedConstraint = JSON.parse(removedConstraintData);
                                    const wasUnsaved = cell.attr('data-was-unsaved') === 'true';
                                    
                                    if (!wasUnsaved) {
                                        // Kaydedilmiş constraint'i geri yükle
                                        if (removedConstraint.ClassCourseId === 0) {
                                            // Kapalı kısıtlama
                                            cell.css('background-color', '#ffe6e6');
                                            cell.text('Closed');
                                        } else {
                                            // Ders kısıtlaması
                                            cell.css('background-color', '#ADD8E6');
                                            // Ders adını bulmaya çalış
                                            const courseButton = $(`.constraint-option-button[data-classcourse-id="${removedConstraint.ClassCourseId}"]`);
                                            if (courseButton.length) {
                                                cell.text(courseButton.text());
                                            } else {
                                                cell.text('Course');
                                            }
                                        }
                                        cell.attr('ondblclick', `RemoveConstraintLocal(this, ${constraint.DayId}, ${constraint.LessonId})`);
                                        cell.removeAttr('onclick onmouseover onmouseout');
                                        cell.attr('data-constraint-data', removedConstraintData);
                                        cell.removeAttr('data-removed-constraint data-was-unsaved');
                                    }
                                }
                            }
                        }
                        
                        // Listeleri sıfırla
                        constraintsToAdd = [];
                        constraintsToRemove = [];
                        showUnsavedChanges();
                        
                        // Kullanıcıya bildir
                        Swal.fire(
                            'İptal edildi!',
                            'Değişiklikler iptal edildi.',
                            'success'
                        );
                    }
                });
            }

            // Tüm kısıtlamaları temizleme
            function clearAllConstraints() {
                Swal.fire({
                    title: 'Tüm Sınıf Kısıtlamalarını Temizle?',
                    text: "Bu, bu sınıf için tüm 'Kapalı' kısıtlamalarını silecektir. Bu işlem geri alınamaz!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Evet, temizle',
                    cancelButtonText: 'İptal'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $('.spinner-overlay').css('display', 'flex');
                        
                        $.ajax({
                            url: '/Constraint/ClearAllClassConstraints',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({ ClassId: currentClassId }),
                            success: function(response) {
                                $('.spinner-overlay').hide();
                                
                                if (response && response.success) {
                                    // Başarılı ise, tüm kısıtlamaları görsel olarak temizle
                                    $('td[data-constraint-data]').each(function() {
                                        const dayId = $(this).attr('data-day-id');
                                        const lessonId = $(this).attr('data-lesson-id');
                                        
                                        $(this).css('background-color', 'white').text('');
                                        $(this).attr('onclick', `AddConstraintLocal(this, ${dayId}, ${lessonId})`);
                                        $(this).attr('onmouseover', "this.style.background='#f5f5f5'");
                                        $(this).attr('onmouseout', "this.style.background='white'");
                                        $(this).removeAttr('ondblclick data-constraint-data data-unsaved');
                                    });
                                    
                                    // Tüm yerel değişiklik listelerini sıfırla
                                    constraintsToAdd = [];
                                    constraintsToRemove = [];
                                    showUnsavedChanges();
                                    
                                    // Kullanıcıya başarılı mesajı göster
                                    Swal.fire(
                                        'Temizlendi!',
                                        response.message || 'Tüm sınıf kısıtlamaları başarıyla temizlendi.',
                                        'success'
                                    );
                                } else {
                                    // Hata durumu
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Hata',
                                        text: response && response.message ? response.message : 'Kısıtlamaları temizlerken bir hata oluştu.',
                                        confirmButtonText: 'Tamam'
                                    });
                                }
                            },
                            error: function(xhr, status, error) {
                                $('.spinner-overlay').hide();
                                console.error("AJAX hatası:", status, error);
                                
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Hata',
                                    text: 'Sunucuyla iletişim kurarken bir hata oluştu.',
                                    confirmButtonText: 'Tamam'
                                });
                            }
                        });
                    }
                });
            }

            function RefreshConstraints() {
                const $constraintTableBody = $('#constraintTableBody');
                
                // Hide existing table and remove loading spinner
                $constraintTableBody.children('table').first().hide();
                $constraintTableBody.find('.loading-spinner').remove();
                
                // Add loading spinner
                $constraintTableBody.append('<div class="loading-spinner" style="display: flex; align-items: center; justify-content: center; position: absolute; top: 0; right: 0; bottom: 0; left: 0; background-color: rgba(255, 255, 255, 0.5); z-index: 1;"><div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div></div>');

                if (!selectedConstraintButton) {
                    $constraintTableBody.html(`
                        <div class="text-center py-5">
                            <i class="fas fa-calendar-days fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">Please select a course from the options panel to view the timetable</h5>
                        </div>
                    `);
                    return;
                }

                const classCourseId = parseInt(selectedConstraintButton.data('classcourse-id'));
                
                var classData = {
                    ClassId: currentClassId,
                    ClassCourseId: classCourseId
                };

                $.ajax({
                    url: '/Constraint/GetConstraintsForClass',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(classData),
                    success: function (response) {
                        $constraintTableBody.html(response);
                    },
                    error: function (xhr, status, error) {
                        console.error('Error details:', {
                            status: status,
                            error: error,
                            response: xhr.responseText
                        });
                        $constraintTableBody.find('.loading-spinner').remove();
                        toastr.error('An error occurred while refreshing constraints.');
                        $constraintTableBody.html(`
                            <div class="text-center py-5">
                                <i class="fas fa-exclamation-circle fa-3x text-danger mb-3"></i>
                                <h5 class="text-danger">Failed to load constraints. Please try again.</h5>
                            </div>
                        `);
                    }
                });
            }

            $(document).ready(function () {
                // Initial setup
                $('.constraint-option-button').each(function() {
                    const $button = $(this);
                    if ($button.text().includes("Close")) {
                        $button.addClass('btn-outline-danger text-danger');
                    }
                });

                // Button click handler
                $('.constraint-option-button').click(function (e) {
                    e.preventDefault();
                    const $button = $(this);
                    
                    // Remove active state from previous button
                    if (selectedConstraintButton) {
                        selectedConstraintButton.removeClass('btn-primary btn-danger text-white')
                            .addClass(selectedConstraintButton.text().includes("Close") ? 'btn-outline-danger text-danger' : 'btn-outline-primary');
                    }

                    selectedConstraintButton = $button;

                    // Set active state on new button
                    selectedConstraintButton.removeClass(selectedConstraintButton.text().includes("Close") ? 'btn-outline-danger text-danger' : 'btn-outline-primary')
                        .addClass(selectedConstraintButton.text().includes("Close") ? 'btn-danger text-white' : 'btn-primary');

                    // Refresh constraints
                    RefreshConstraints();
                });
            });
        </script>
}