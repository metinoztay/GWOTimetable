@{
    ViewBag.MenuHead = "Management";
    ViewBag.Controller = "Educator";
    ViewBag.Action = "Details";
    ViewBag.Title = "Educator Details";
    int number = 1;
    Educator educatorModel = Model.Educators.First();
    List<Day> days = Model.Days.ToList();
    List<Lesson> lessons = Model.Lessons.ToList();
    int maxLessonCount = 0;
    foreach (var day in Model.Days)
    {
        if (day.LessonCount > maxLessonCount)
            maxLessonCount = day.LessonCount;
    }

    string FindConstraint(int dayId,int lessonId)
    {
        Day day = days[dayId];    
        Lesson lesson = lessons[lessonId];        

        return string.Concat(day.DayOfWeek.ToString()," ",lesson.LessonNumber.ToString());
    }
}

@using GWOTimetable.Models;
@using System.Security.Claims
@model Workspace
<div class="card card-info card-outline">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h3 class="card-title"><i class="fas fa-circle-info"></i> &ensp;Educator Details</h3>

        <div class="ml-auto">
            <button class="btn btn-outline-danger btn-sm delete-educator-button"
                data-educator-id="@educatorModel.EducatorId" data-shortname="@educatorModel.ShortName"
                data-firstname="@educatorModel.FirstName" data-lastname="@educatorModel.LastName" data-toggle="modal"
                data-target="#deleteEducatorModal" id="deleteEducatorButton" hidden>
                <i class="fas fa-trash"></i>&nbsp; Delete
            </button>
            <button type="button" id="saveEducatorButton" class="btn btn-outline-success btn-sm ml-1" hidden>
                <i class="fas fa-save"></i>&nbsp; Save
            </button>
            <button type="button" id="closeEditButton" class="btn btn-outline-info btn-sm ml-1" hidden>
                <i class="fas fa-xmark"></i>&nbsp; Close
            </button>
            <button type="button" id="editEducatorButton" class="btn btn-outline-info btn-sm ml-1">
                <i class="fas fa-edit"></i>&nbsp; Edit
            </button>

        </div>
    </div>

    <div class="card-body">
        <div class="form-group ">
            <label>Workspace</label>
            <select class="form-control select2bs4 select2-hidden-accessible" disabled style="width: 100%;">
                <option value="0">@User.FindFirstValue("WorkspaceName")</option>
            </select>
        </div>
        <div class=" row">

            <div class="form-group col-md-2">
                <label>Short Name </label>
                <input type="text" class="form-control" value="@educatorModel.ShortName" id="educatorShortName"
                    maxlength="10" disabled>
            </div>

            <div class="form-group col-md-5">
                <label>Created At </label>
                <input type="text" class="form-control" value="@educatorModel.CreatedAt" disabled>
            </div>

            <div class="form-group col-md-5">
                <label>Updated At </label>
                <input type="text" class="form-control"
                    value="@(educatorModel.UpdatedAt.HasValue ? educatorModel.UpdatedAt.ToString() : "Not updated yet.")"
                    disabled>
            </div>

            <div class="form-group col-md-2">
                <label>Title </label>
                <input type="text" class="form-control" value="@educatorModel.Title" id="educatorTitle" maxlength="20"
                    disabled>
            </div>

            <div class="form-group col-md-5">
                <label>First Name </label>
                <input type="text" class="form-control" value="@educatorModel.FirstName" id="educatorFirstName"
                    maxlength="50" disabled>
            </div>

            <div class="form-group col-md-5">
                <label>Last Name </label>
                <input type="text" class="form-control" value="@educatorModel.LastName" id="educatorLastName"
                    maxlength="50" disabled>
            </div>

            <div class="form-group col-md-12">
                <label>Email </label>
                <input type="text" class="form-control" value="@educatorModel.Email" id="educatorEmail" maxlength="100"
                    disabled>
            </div>

        </div>
    </div>
</div>

<div class="modal fade" id="deleteEducatorModal" tabindex="-1" role="dialog" aria-labelledby="deleteEducatorModalLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteEducatorModalLabel"><i class="fas fa-exclamation-circle"></i>&nbsp;
                    Delete
                    Confirmation</h5>
                <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <dt>Are you sure you want to delete this educator?</dt>
                <dd>All settings related to this educator will be deleted.</dd>
                <br>
                <dl class="row">
                    <dt class="col-sm-4">Short Name</dt>
                    <dd class="col-sm-8" id="deleteEducatorShortName"></dd>
                    <dt class="col-sm-4">First Name</dt>
                    <dd class="col-sm-8" id="deleteEducatorFirstName"></dd>
                    <dt class="col-sm-4">Last Name</dt>
                    <dd class="col-sm-8" id="deleteEducatorLastName"></dd>

                </dl>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-educator-id=""
                    id="confirmDeleteEducatorButton">Delete</button>
            </div>
        </div>
    </div>
</div>


<div class="card card-success card-outline mt-4">
    <div class="card-header d-flex align-items-center">
        <h3 class="card-title"><i class="fas fa-book"></i>&nbsp; Courses</h3>

        <button type="button" class="btn btn-outline-success btn-sm ml-auto" data-toggle="modal"
            data-target="#addCourseModal">
            <i class="fas fa-plus"></i>&nbsp; Add Course
        </button>

    </div>
    <div class="card-body p-0 table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Number</th>
                    <th>Educator</th>
                    <th>Course Code</th>
                    <th>Course</th>
                    <th class="text-center">Placement Format</th>
                    <th class="text-center">Classroom</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var c in educatorModel.ClassCourses)
                {
                    <tr>
                        <td>
                            @number

                        </td>
                        <td>@c.Educator.Title @c.Educator.FirstName @c.Educator.LastName</td>
                        <td>@c.Course.CourseCode</td>
                        <td>@c.Course.CourseName</td>
                        <td class="text-center">@c.Course.PlacementFormat</td>
                        <td class="text-center">@c.Classroom.ClassroomName</td>
                        <td>

                            <button class="btn btn-info btn-sm update-course-button mb-2 mb-xl-0" data-classcourse-id="@c.ClassCourseId"
                                data-course-id="@c.Course.CourseId" data-class-id="@c.Class.ClassId"
                                data-classroom-id="@c.Classroom.ClassroomId" data-toggle="modal"
                                data-target="#updateCourseModal">
                                <i class="fas fa-edit"></i>
                            </button>

                            <button class="btn btn-danger btn-sm delete-course-button" data-course-id="@c.ClassCourseId"
                                data-course-code="@c.Course.CourseCode" data-course-name="@c.Course.CourseName"
                                data-educator-name="@c.Educator.Title @c.Educator.FirstName @c.Educator.LastName"
                                data-classroom="@c.Classroom.ClassroomName" data-toggle="modal"
                                data-target="#deleteCourseModal">
                                <i class="fas fa-trash"></i>
                            </button>

                        </td>
                    </tr>
                    number++;
                }
            </tbody>

        </table>
    </div>
</div>



<div class="row">
    <div class="col-md-9">
        <div class="card card-gray card-outline mt-3">
            <div class="card-header d-flex align-items-center">
                <h3 class="card-title"><i class="fas fa-calendar-days"></i>&nbsp; Schedule</h3>
            <div class="ml-auto">
                <button type="button" class="btn btn-outline-secondary btn-sm ml-1" onclick="ClearConstraints()">
                    <i class="fa-solid fa-eraser"></i>&nbsp; Clear
                </button>
               
                
                </div>
            </div>
            <div class="card-body p-0 table-responsive" id="constraintTableBody">
                <table class="table table-bordered">

                    <tr>
                        <td style="width: 8%; text-align: center; vertical-align: middle;"></td>
                        @foreach (var day in days)
                        {
                            if (day.LessonCount > 0)
                            {
                                <td style="width: calc((100% - 8%) / @days.Count()); height: 50px; text-align: center; background-color: rgb(255, 255, 255);">@day.DayOfWeek</td>
                            }

                        }
                    </tr>

                    @for (int i = 0; i < maxLessonCount; i++)
                    {
                        <tr>
                            <td style="width: 8%; text-align: center; vertical-align: middle;">
                                @(lessons[i].StartTime)-@(lessons[i].EndTime)</td>

                            @for (int j = 0; j < Model.Days.Count(); j++)
                            {
                                if (days[j].LessonCount > 0)
                                {
                                    if (i < days[j].LessonCount)
                                    {
                                        <td style="width: calc((100% - 8%) / @Model.Days.Count()); height: 70px; cursor: pointer; text-align: center; vertical-align: middle;"
                                            onclick="GetConstraintOptions(event, @i, @j)" onmouseover="this.style.background='#f5f5f5'"
                                            onmouseout="this.style.background='white'">
                                            @FindConstraint(j, i)
                                        </td>
                                    }
                                    else
                                    {
                                        <td style="width: calc((100% - 8%) / @Model.Days.Count()); height: 70px; background-color: #ccc; opacity: 0.5; pointer-events: none;"></td>
                                    }
                                }
                            }
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>

    <div class="col-md-3">
        <div class="card card-gray card-outline mt-3">
            <div class="card-header d-flex align-items-center">
                <h3 class="card-title pt-1 pb-1"><i class="fas fa-calendar-days"></i>&nbsp; Options</h3>
            
            </div>
            <div class="card-body">
                @foreach (var c in educatorModel.ClassCourses)
                {
                    <button type="button" class="btn btn-outline-primary btn-block constraint-option-button" data-classcourse-id="@c.ClassCourseId">(@c.Course.CourseCode) - @c.Classroom.ClassroomName<br>@c.Course.CourseName</button>
                }
                <button type="button" class="btn btn-outline-danger btn-block pt-3 pb-3 constraint-option-button" data-classcourse-id="0">Close</button>                
            </div>
        </div>
    </div>
</div>



<div class="modal fade" id="addCourseModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success">
                <h5 class="modal-title"><i class="fas fa-circle-plus"></i>&nbsp; Add New Course</h5>
                <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group ">
                    <label>Workspace</label>
                    <select class="form-control select2bs4 select2-hidden-accessible" style="width: 100%;" tabindex="-1"
                        aria-hidden="true" disabled>
                        <option value="0">@User.FindFirstValue("WorkspaceName")</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Educator</label>
                    <select class="form-control select2bs4 select2-hidden-accessible" id="educatorSelect" disabled>
                        <option value="@educatorModel.EducatorId">@educatorModel.Title @educatorModel.FirstName
                            @educatorModel.LastName</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Class</label>
                    <select class="form-control select2bs4 select2-hidden-accessible" id="classSelect">
                        <option value="0">Select Class</option>
                        @foreach (var c in Model.Classes)
                        {
                            <option value="@c.ClassId">@c.ClassName
                            </option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label>Course</label>
                    <select class="form-control select2bs4 select2-hidden-accessible" id="courseSelect">
                        <option value="0">Select Course</option>
                        @foreach (var course in Model.Courses)
                        {
                            <option value="@course.CourseId">(@course.CourseCode) @course.CourseName</option>
                        }
                    </select>
                </div>



                <div class="form-group">
                    <label>Classroom</label>
                    <select class="form-control select2bs4 select2-hidden-accessible" id="classroomSelect">
                        <option value="0">Select Classroom</option>
                        @foreach (var classroom in Model.Classrooms)
                        {
                            <option value="@classroom.ClassroomId">@classroom.ClassroomName</option>
                        }
                    </select>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="saveNewCourseButton">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="updateCourseModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-info">
                <h5 class="modal-title"><i class="fas fa-edit"></i>&nbsp; Update Course</h5>
                <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group ">
                    <label>Workspace</label>
                    <select class="form-control select2bs4 select2-hidden-accessible" style="width: 100%;" tabindex="-1"
                        aria-hidden="true" disabled>
                        <option value="0">@User.FindFirstValue("WorkspaceName")</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Educator</label>
                    <select class="form-control select2bs4 select2-hidden-accessible" id="updateeducatorSelect"
                        disabled>
                        <option value="@educatorModel.EducatorId">@educatorModel.Title @educatorModel.FirstName
                            @educatorModel.LastName</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Class</label>
                    <select class="form-control select2bs4 select2-hidden-accessible" id="updateclassSelect">
                        <option value="0">Select Class</option>
                        @foreach (var c in Model.Classes)
                        {
                            <option value="@c.ClassId">@c.ClassName</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label>Course</label>
                    <select class="form-control select2bs4 select2-hidden-accessible" id="updatecourseSelect">
                        <option value="0">Select Course</option>
                        @foreach (var course in Model.Courses)
                        {
                            <option value="@course.CourseId">(@course.CourseCode) @course.CourseName</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label>Classroom</label>
                    <select class="form-control select2bs4 select2-hidden-accessible" id="updateclassroomSelect">
                        <option value="0">Select Classroom</option>
                        @foreach (var classroom in Model.Classrooms)
                        {
                            <option value="@classroom.ClassroomId">@classroom.ClassroomName</option>
                        }
                    </select>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="confirmUpdateCourseButton"
                        data-classcourse-id="">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="deleteCourseModal" tabindex="-1" role="dialog" aria-labelledby="deleteCourseModalLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteCourseModalLabel"><i class="fas fa-exclamation-circle"></i>&nbsp;
                    Delete
                    Confirmation</h5>
                <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <dt>Are you sure you want to delete this course?</dt>
                <dd>All settings related to this course will be deleted.</dd>
                <br>
                <dl class="row">
                    <dt class="col-sm-4">Course Code</dt>
                    <dd class="col-sm-8" id="deleteCourseCode"></dd>
                    <dt class="col-sm-4">Course Name</dt>
                    <dd class="col-sm-8" id="deleteCourseName"></dd>
                    <dt class="col-sm-4">Educator Name</dt>
                    <dd class="col-sm-8" id="deleteCourseEducatorName"></dd>
                    <dt class="col-sm-4">Classroom</dt>
                    <dd class="col-sm-8" id="deleteCourseClassroom"></dd>

                </dl>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-course-id=""
                    id="confirmDeleteCourseButton">Delete</button>
            </div>
        </div>
    </div>
</div>



@section Scripts {

    <script>
        $(document).ready(function () {
            $('.delete-educator-button').on('click', function () {
                const educatorId = $(this).data('educator-id');
                $('#deleteEducatorShortName').text($(this).data('shortname'));
                $('#deleteEducatorFirstName').text($(this).data('firstname'));
                $('#deleteEducatorLastName').text($(this).data('lastname'));
                $('#confirmDeleteEducatorButton').data('educator-id', educatorId);
            });
            $('#confirmDeleteEducatorButton').on('click', function () {

                const educatorId = parseInt($(this).data('educator-id'));

                const educatorData = {
                    EducatorId: educatorId
                };

                $.ajax({
                    url: '@Url.Action("DeleteEducator", "Educator")',
                    type: 'DELETE',
                    contentType: 'application/json',
                    data: JSON.stringify(educatorData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Educator deleted successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });
            });
        });

    </script>

    <script>
        $(document).ready(function () {
            $('.update-course-button').on('click', function () {
                const classcourseId = $(this).data('classcourse-id');
                $('#updateeducatorSelect').val(@educatorModel.EducatorId).trigger('change');
                $('#updateclassSelect').val($(this).data('class-id')).trigger('change');
                $('#updatecourseSelect').val($(this).data('course-id')).trigger('change');
                $('#updateclassroomSelect').val($(this).data('classroom-id')).trigger('change');

                $('#confirmUpdateCourseButton').data('classcourse-id', classcourseId);
            });
            $('#confirmUpdateCourseButton').on('click', function () {

                var courseData = {
                    ClassCourseId: parseInt($(this).data('classcourse-id')),
                    ClassId: parseInt($('#updateclassSelect').val()),
                    CourseId: parseInt($('#updatecourseSelect').val()),
                    ClassroomId: parseInt($('#updateclassroomSelect').val()),
                    EducatorId: @educatorModel.EducatorId
                                                                                                                                                                                                                                                                                                                                                                                                    };

                $.ajax({
                    url: '@Url.Action("UpdateCourse", "ClassCourse")',
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(courseData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Course updated successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });
            });
        });

    </script>

    <script>
        $(document).ready(function () {
            $('#editEducatorButton').click(function () {
                $('#educatorShortName,#educatorFirstName,#educatorLastName,#educatorTitle,#educatorEmail').removeAttr('disabled');
                $('#saveEducatorButton,#deleteEducatorButton,#closeEditButton').removeAttr('hidden');
                $('#editEducatorButton').attr('hidden', true);
                $('#weeklyHourCount').change();
            });


            $('#closeEditButton').click(function () {
                $('#educatorShortName,#educatorFirstName,#educatorLastName,#educatorTitle,#educatorEmail').attr('disabled', true);
                $('#saveEducatorButton,#deleteEducatorButton,#closeEditButton').attr('hidden', true);
                $('#editEducatorButton').removeAttr('hidden');
            });

            $('#saveEducatorButton').click(function () {
                var educatorData = {
                    EducatorId: parseInt('@educatorModel.EducatorId'),
                    ShortName: $('#educatorShortName').val(),
                    FirstName: $('#educatorFirstName').val(),
                    LastName: $('#educatorLastName').val(),
                    Title: $('#educatorTitle').val(),
                    Email: $('#educatorEmail').val()
                };


                $.ajax({
                    url: '@Url.Action("UpdateEducator", "Educator")',
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(educatorData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Educator updated successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });
            });

        });

    </script>

    <script>
        $(document).ready(function () {
            $('#saveNewCourseButton').click(function () {
                var courseData = {
                    ClassId: parseInt($('#classSelect').val()),
                    CourseId: parseInt($('#courseSelect').val()),
                    ClassroomId: parseInt($('#classroomSelect').val()),
                    EducatorId: parseInt($('#educatorSelect').val())
                };

                $.ajax({
                    url: '@Url.Action("NewCourse", "ClassCourse")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(courseData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Course added successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });

            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $('.delete-course-button').on('click', function () {
                const courseId = $(this).data('course-id');
                $('#deleteCourseCode').text($(this).data('course-code'));
                $('#deleteCourseName').text($(this).data('course-name'));
                $('#deleteCourseEducatorName').text($(this).data('educator-name'));
                $('#deleteCourseClassroom').text($(this).data('classroom'));

                $('#confirmDeleteCourseButton').data('course-id', courseId);


            });
            $('#confirmDeleteCourseButton').on('click', function () {

                const courseId = parseInt($(this).data('course-id'));

                const courseData = {
                    ClassCourseId: courseId
                };

                $.ajax({
                    url: '@Url.Action("DeleteCourse", "ClassCourse")',
                    type: 'DELETE',
                    contentType: 'application/json',
                    data: JSON.stringify(courseData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Course deleted successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });
            });
        });

    </script>


      
    <script>
        var selectedConstraintButton;

        $(document).ready(function () {
            $('.constraint-option-button').on('click', function () {
                $('#constraintTableBody').children('table').first().hide();
                $('#constraintTableBody').append('<div style="display: flex; align-items: center; justify-content: center; position: absolute; top: 0; right: 0; bottom: 0; left: 0; background-color: rgba(255, 255, 255, 0.5); z-index: 1;"><div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div></div>');
                if (selectedConstraintButton) {
                    if (selectedConstraintButton.text().includes("Close")) {
                        selectedConstraintButton.removeClass('text-white');
                    }
                    selectedConstraintButton.removeClass('btn-primary btn-danger').addClass('btn-outline-primary');
                }

                selectedConstraintButton = $(this);

                if (selectedConstraintButton.text().includes("Close")) {
                    selectedConstraintButton.removeClass('btn-outline-primary').addClass('btn-danger text-white');
                } else {
                    selectedConstraintButton.removeClass('btn-outline-primary').addClass('btn-primary');
                }

                const classcourseId = parseInt($(this).data('classcourse-id'));
                
                
                    var classCourse = {
                        ClassCourseId: classcourseId,
                        EducatorId: @educatorModel.EducatorId,
                    };

                    $.ajax({
                        url: '@Url.Action("GetConstraintsForEducator", "Constraint")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(classCourse),
                        success: function (response) {
                            $('#constraintTableBody').html(response);
                        },
                        error: function (xhr, status, error) {
                            var errorMessage = "An unknown error occurred. Please try again.";
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }
                            Swal.fire({
                                toast: true,
                                icon: 'error',
                                title: errorMessage,
                                position: 'top',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    });
                
            });
           
        });
    </script>

    

    <script>
        function AddConstraint(event, dayId, lessonId) {
            const classCourseId = parseInt(selectedConstraintButton.data('classcourse-id'));
            var timetableConst = {
                DayId: parseInt(dayId),
                LessonId: parseInt(lessonId),
                ClassCourseId: classCourseId,
                EducatorId: @educatorModel.EducatorId,
            };

             $.ajax({
                        url: '@Url.Action("AddConstraintForEducator", "Constraint")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(timetableConst),
                        success: function (response) {
                            selectedConstraintButton.click();
                        },
                        error: function (xhr, status, error) {
                            var errorMessage = "An unknown error occurred. Please try again.";
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }
                            Swal.fire({
                                toast: true,
                                icon: 'error',
                                title: errorMessage,
                                position: 'top',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    });
        }
    </script>
    <script>
        function RemoveConstraint(event, dayId, lessonId) {
        
            const classCourseId = parseInt(selectedConstraintButton.data('classcourse-id'));
            var timetableConst = {
                DayId: parseInt(dayId),
                LessonId: parseInt(lessonId),
                ClassCourseId: classCourseId,
                EducatorId: @educatorModel.EducatorId,
            };

             $.ajax({
                        url: '@Url.Action("RemoveConstraintForEducator", "Constraint")',
                        type: 'DELETE',
                        contentType: 'application/json',
                        data: JSON.stringify(timetableConst),
                        success: function (response) {
                            selectedConstraintButton.click();
                        },
                        error: function (xhr, status, error) {
                            var errorMessage = "An unknown error occurred. Please try again.";
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }
                            Swal.fire({
                                toast: true,
                                icon: 'error',
                                title: errorMessage,
                                position: 'top',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    });
        }        
    </script>
    <script>
        function ClearConstraints(event, dayId, lessonId) {         
            var timetableConst = {                
                EducatorId: @educatorModel.EducatorId,
            };

             $.ajax({
                        url: '@Url.Action("ClearConstraintsForEducator", "Constraint")',
                        type: 'DELETE',
                        contentType: 'application/json',
                        data: JSON.stringify(timetableConst),
                        success: function (response) {
                            selectedConstraintButton.click();
                        },
                        error: function (xhr, status, error) {
                            var errorMessage = "An unknown error occurred. Please try again.";
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }
                            Swal.fire({
                                toast: true,
                                icon: 'error',
                                title: errorMessage,
                                position: 'top',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    });
        }        
    </script>
    

}

