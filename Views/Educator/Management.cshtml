@using System.Security.Claims
@{
    ViewBag.MenuHead = "Management";
    ViewBag.Controller = "Educator";
    ViewBag.Action = "List";
    ViewBag.Title = "Educator Management";
    int i = 1;
}

@model IEnumerable<Educator>

<div class="card card-info card-outline">
    <div class="card-header d-flex align-items-center">
        <h3 class="card-title"><i class="fas fa-user-tie"></i> &ensp; Educator List</h3>

        <button type="button" class="btn btn-outline-success btn-sm ml-auto" data-toggle="modal"
            data-target="#addEducatorModal">
            <i class="fas fa-plus"></i>&nbsp; Add Educator
        </button>
    </div>

    <div class="card-body p-0">
        @if (Model.Count() > 0)
        {
            <table class="table table-striped projects" id="educatorList">
                <thead>
                    <tr>
                        <th style="">No</th>
                        <th>Short Name</th>
                        <th>Title</th>
                        <th>Full Name</th>
                        <th>Email</th>
                        <th class="text-center">Created At</th>
                        <th class="text-center">Updated At</th>
                        <th class="text-center" style="">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var educator in Model)
                    {
                        <tr>
                            <td style="width: 1%" class="text-right">@i</td>

                            <td style="width: 10%">@educator.ShortName</td>
                            <td style="width: 10%">@educator.Title</td>
                            <td style="width: 20%">@educator.FirstName @educator.LastName</td>
                            <td style="width: 20%">@educator.Email</td>

                            <td style="width: 9%" class="text-center">@educator.CreatedAt</td>
                            <td style="width: 9%" class="text-center">@(educator.UpdatedAt.HasValue ?
                        educator.UpdatedAt.ToString()
                        : "Not updated yet.")</td>
                            <td class="text-center" style="width: 15%">
                                <a asp-controller="Educator" asp-action="Details" asp-route-educatorId="@educator.EducatorId"
                                    class="btn btn-info btn-sm">
                                    <i class="fas fa-eye"></i>&ensp; Details
                                </a>
                                <button class="btn btn-danger btn-sm delete-educator-button"
                                    data-educator-id="@educator.EducatorId" data-shortname="@educator.ShortName"
                                    data-firstname="@educator.FirstName" data-lastname="@educator.LastName" data-toggle="modal"
                                    data-target="#deleteEducatorModal">
                                    <i class="fas fa-trash"></i>
                                </button>

                            </td>

                        </tr>
                        i++;
                    }
                </tbody>
            </table>
        }
    </div>
</div>




<!-- Add Educator Modal -->
<div class="modal fade" id="addEducatorModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success">
                <h5 class="modal-title"><i class="fas fa-circle-plus"></i>&nbsp; Add New Educator</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group ">
                    <label>Workspace</label>
                    <select class="form-control select2bs4 select2-hidden-accessible" disabled>
                        <option value="0">@User.FindFirstValue("WorkspaceName")</option>
                    </select>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        <label>Short Name</label>
                        <input type="text" class="form-control" id="newEducatorShortName" maxlength="10">
                    </div>

                    <div class="form-group col-md-6">
                        <label>Title</label>
                        <input type="text" class="form-control" id="newEducatorTitle" maxlength="20">
                    </div>

                </div>

                <div class="form-group">
                    <label>First Name </label>
                    <input type="text" class="form-control" id="newEducatorFirstName" maxlength="50">
                </div>
                <div class="form-group">
                    <label>Last Name </label>
                    <input type="text" class="form-control" id="newEducatorLastName" maxlength="50">
                </div>

                <div class="form-group">
                    <label>Email </label>
                    <input type="text" class="form-control" id="newEducatorEmail" maxlength="100">
                </div>


                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="saveNewEducatorButton">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteEducatorModal" tabindex="-1" role="dialog" aria-labelledby="deleteEducatorModalLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteEducatorModalLabel"><i class="fas fa-exclamation-circle"></i>&nbsp;
                    Delete
                    Confirmation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <dt>Are you sure you want to delete this educator?</dt>
                <dd>All settings related to this educator will be deleted.</dd>
                <br>
                <dl class="row">
                    <dt class="col-sm-4">Short Name</dt>
                    <dd class="col-sm-8" id="deleteEducatorShortName"></dd>
                    <dt class="col-sm-4">First Name</dt>
                    <dd class="col-sm-8" id="deleteEducatorFirstName"></dd>
                    <dt class="col-sm-4">Last Name</dt>
                    <dd class="col-sm-8" id="deleteEducatorLastName"></dd>

                </dl>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-educator-id=""
                    id="confirmDeleteEducatorButton">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {


    <script>
        $(document).ready(function () {
            $('#saveNewEducatorButton').click(function () {
                var educatorData = {
                    ShortName: $('#newEducatorShortName').val(),
                    FirstName: $('#newEducatorFirstName').val(),
                    LastName: $('#newEducatorLastName').val(),
                    Title: $('#newEducatorTitle').val(),
                    Email: $('#newEducatorEmail').val()
                };

                $.ajax({
                    url: '@Url.Action("NewEducator", "Educator")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(educatorData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Educator added successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayÄ±lan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });

            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $('.delete-educator-button').on('click', function () {
                const educatorId = $(this).data('educator-id');
                $('#deleteEducatorShortName').text($(this).data('shortname'));
                $('#deleteEducatorFirstName').text($(this).data('firstname'));
                $('#deleteEducatorLastName').text($(this).data('lastname'));
                $('#confirmDeleteEducatorButton').data('educator-id', educatorId);
            });
            $('#confirmDeleteEducatorButton').on('click', function () {

                const educatorId = parseInt($(this).data('educator-id'));

                const educatorData = {
                    EducatorId: educatorId
                };

                $.ajax({
                    url: '@Url.Action("DeleteEducator", "Educator")',
                    type: 'DELETE',
                    contentType: 'application/json',
                    data: JSON.stringify(educatorData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Educator deleted successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayÄ±lan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                });
            });
        });

    </script>

    <script>

        $(document).ready(function () {
            $('#newEducatorFirstName, #newEducatorLastName').on('input', function () {
                const firstName = $('#newEducatorFirstName').val().trim();
                const lastName = $('#newEducatorLastName').val().trim();

                let shortName = '';

                // Sesli harfler tanÄ±mÄ±
                const vowels = 'AEIOUaeiou';

                // Ä°sim ve soyisim kelimelerine ayÄ±r
                const firstNameParts = firstName.split(/\s+/).filter(part => part.length > 0);
                const lastNameParts = lastName.split(/\s+/).filter(part => part.length > 0);

                // Ä°lk harfleri sabit olarak ekle
                let shortNameParts = [];

                firstNameParts.forEach(part => {
                    if (part.length > 0) {
                        shortNameParts.push(part[0].toUpperCase()); // Ä°lk harfi ekle
                    }
                });

                // Ä°sim ve soyisimden kalan harfleri sÄ±rayla ekle
                firstNameParts.forEach(part => {
                    if (part.length > 1) {
                        shortNameParts.push(part.substring(1).toUpperCase());
                    }
                });

                lastNameParts.forEach(part => {
                    if (part.length > 0) {
                        shortNameParts.push(part[0].toUpperCase()); // Ä°lk harfi ekle
                    }
                });



                lastNameParts.forEach(part => {
                    if (part.length > 1) {
                        shortNameParts.push(part.substring(1).toUpperCase());
                    }
                });

                // KÄ±sa adÄ± oluÅtur (10 karaktere sesli harf silerek dÃ¼ÅÃ¼rme)
                shortName = shortNameParts.join('');
                if (shortName.length > 10) {
                    shortName = removeVowels(shortName, 10);
                }

                $('#newEducatorShortName').val(shortName);
            });

            // Sesli harfleri silen yardÄ±mcÄ± fonksiyon
            function removeVowels(input, targetLength) {
                let result = '';
                let vowelsRemoved = 0;

                for (let i = 0; i < input.length; i++) {
                    const char = input[i];
                    if (vowels.includes(char) && input.length - vowelsRemoved > targetLength) {
                        vowelsRemoved++;
                    } else {
                        result += char;
                    }
                }

                // Hala fazla karakter varsa, sondan kesme yerine ek bir Ã¶nlem
                return result.substring(0, targetLength);
            }
        });




    </script>
}
