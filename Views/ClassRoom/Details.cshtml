@{
    ViewBag.MenuHead = "Management";
    ViewBag.Controller = "Classroom";
    ViewBag.Action = "Details";
    ViewBag.Title = "Classroom Details";
}
@using GWOTimetable.Models;
@using System.Security.Claims
@model Classroom
<div class="card card-info card-outline">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h3 class="card-title"><i class="fas fa-circle-info"></i> &ensp;Classroom Details</h3>

        <div class="ml-auto">
            <button class="btn btn-outline-danger btn-sm delete-classroom-button" data-classroom-id="@Model.ClassroomId"
                data-classroom-name="@Model.ClassroomName" data-classroom-desc="@Model.Description" data-toggle="modal"
                data-target="#deleteClassroomModal" id="deleteClassroomButton" hidden>
                <i class="fas fa-trash"></i>&nbsp; Delete
            </button>
            <button type="button" id="saveClassroomButton" class="btn btn-outline-success btn-sm ml-1" hidden>
                <i class="fas fa-save"></i>&nbsp; Save
            </button>
            <button type="button" id="closeEditButton" class="btn btn-outline-info btn-sm ml-1" hidden>
                <i class="fas fa-xmark"></i>&nbsp; Close
            </button>
            <button type="button" id="editClassroomButton" class="btn btn-outline-info btn-sm ml-1">
                <i class="fas fa-edit"></i>&nbsp; Edit
            </button>

        </div>
    </div>

    <div class="card-body">
        <div class="form-group ">
            <label>Workspace</label>
            <select class="form-control select2bs4 select2-hidden-accessible" disabled style="width: 100%;">
                <option value="0">@User.FindFirstValue("WorkspaceName")</option>
            </select>
        </div>
        <div class=" row">
            <div class="form-group col-md-6">
                <label>Classroom Name </label>
                <input type="text" class="form-control" value="@Model.ClassroomName" id="classroomName" maxlength="50"
                    disabled>
            </div>


            <div class="form-group col-md-3">
                <label>Created At </label>
                <input type="text" class="form-control" value="@Model.CreatedAt" disabled>
            </div>


            <div class="form-group col-md-3">
                <label>Updated At </label>
                <input type="text" class="form-control"
                    value="@(Model.UpdatedAt.HasValue ? Model.UpdatedAt.ToString() : "Not updated yet.")" disabled>
            </div>

        </div>
        <div class=" row">
            <div class="form-group col-md-12">
                <label>Description</label>
                <textarea class="form-control" id="classroomDescription" rows="2" maxlength="250" disabled>
                    @if (string.IsNullOrEmpty(Model.Description))
                    {
                            @("No description.".Trim())
                    }
                    else
                    {
                            @(Model.Description.Trim())
                    }
                </textarea>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-9">
        <div class="card card-gray card-outline">
            <div class="card-body p-0 table-responsive" id="constraintTableBody">
                <div class="text-center py-5">
                    <i class="fas fa-calendar-days fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Please select a course from the options panel to view the timetable</h5>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-3">
        <div class="card card-gray card-outline">
            <div class="card-header d-flex align-items-center">
                <h3 class="card-title pt-1 pb-1"><i class="fas fa-calendar-days"></i>&nbsp; Options</h3>
            </div>
            <div class="card-body">
                @foreach (var classCourse in Model.ClassCourses)
                {
                    <button type="button" class="btn btn-outline-primary btn-block constraint-option-button mb-2" 
                            data-classcourse-id="@classCourse.ClassCourseId" 
                            data-classroom-id="@Model.ClassroomId"
                            data-course-code="@classCourse.Course.CourseCode"
                            data-course-name="@classCourse.Course.CourseName"
                            data-class-name="@classCourse.Class.ClassName">
                        (@classCourse.Course.CourseCode) - @classCourse.Class.ClassName<br>
                        @classCourse.Course.CourseName
                    </button>
                }
                <button type="button" class="btn btn-outline-danger btn-block pt-3 pb-3 constraint-option-button" 
                        data-classcourse-id="0" 
                        data-classroom-id="@Model.ClassroomId"
                        data-constraint-type="close">
                    <i class="fas fa-ban"></i>&nbsp; Mark as Unavailable
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Spinner için özel stil tanımlaması -->
<style>
    .classroom-spinner-overlay {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }
</style>

<div class="modal fade" id="deleteClassroomModal" tabindex="-1" role="dialog"
    aria-labelledby="deleteClassroomModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteClassroomModalLabel"><i class="fas fa-exclamation-circle"></i>&nbsp;
                    Delete
                    Confirmation</h5>
                <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <dt>Are you sure you want to delete this classroom?</dt>
                <dd>All settings related to this classroom will be deleted.</dd>
                <br>
                <dl class="row">
                    <dt class="col-sm-4">Classroom Name</dt>
                    <dd class="col-sm-8" id="deleteClassroomName"></dd>
                    <dt class="col-sm-4">Classroom Description</dt>
                    <dd class="col-sm-8" id="deleteClassroomDesc"></dd>

                </dl>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-classroom-id=""
                    id="confirmDeleteClassroomButton">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('.delete-classroom-button').on('click', function () {
                const classroomId = $(this).data('classroom-id');
                $('#deleteClassroomName').text($(this).data('classroom-name'));
                $('#deleteClassroomDesc').text($(this).data('classroom-desc'));

                $('#confirmDeleteClassroomButton').data('classroom-id', classroomId);
            });
            $('#confirmDeleteClassroomButton').on('click', function () {

                const classroomId = parseInt($(this).data('classroom-id'));

                const classroomData = {
                    ClassroomId: classroomId
                };

                $.ajax({
                    url: '@Url.Action("DeleteClassroom", "Classroom")',
                    type: 'DELETE',
                    contentType: 'application/json',
                    data: JSON.stringify(classroomData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Classroom deleted successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                });
            });
        });

    </script>

    <script>
        $(document).ready(function () {
            $('#editClassroomButton').click(function () {
                $('#classroomCode,#classroomName,#classroomDescription').removeAttr('disabled');
                $('#saveClassroomButton,#deleteClassroomButton,#closeEditButton').removeAttr('hidden');
                $('#editClassroomButton').attr('hidden', true);
            });


            $('#closeEditButton').click(function () {
                $('#classroomCode,#classroomName,#classroomDescription').attr('disabled', true);
                $('#saveClassroomButton,#deleteClassroomButton,#closeEditButton').attr('hidden', true);
                $('#editClassroomButton').removeAttr('hidden');
            });

            $('#saveClassroomButton').click(function () {
                var classroomData = {
                    ClassroomId: parseInt('@Model.ClassroomId'),
                    ClassroomName: $('#classroomName').val(),
                    Description: $('#classroomDescription').val()
                };


                $.ajax({
                    url: '@Url.Action("UpdateClassroom", "Classroom")',
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(classroomData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Classroom updated successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                });
            });
        });
    </script>

    <script>
        // Global değişken olarak current classroom ID'sini tanımla
        const currentClassroomId = @Model.ClassroomId;
        var selectedConstraintButton;
        var hasUnsavedChanges = false;
        var constraintsToAdd = [];
        var constraintsToRemove = [];
        
        $(document).ready(function () {
            // Constraint option button tıklama olayını dinle
            $('.constraint-option-button').click(function() {
                // Önceki butonları vurgulama özelliğini kaldır
                $('.constraint-option-button').removeClass('active');
                
                // Tıklanan butonu vurgula
                $(this).addClass('active');
                
                // Tıklanan butonun verilerini sakla
                selectedConstraintButton = $(this);
                
                // Constraint tablosunu yeniden yükle
                RefreshConstraints();
            });
        });
        
        // Kısıtlamaları yenileme fonksiyonu
        function RefreshConstraints() {
            const $constraintTableBody = $('#constraintTableBody');
            
            // Eğer seçilen buton yoksa, yükleme yapmaya gerek yok
            if (!selectedConstraintButton) {
                $constraintTableBody.html(`
                    <div class="text-center py-5">
                        <i class="fas fa-calendar-days fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">Please select a course from the options panel to view the timetable</h5>
                    </div>
                `);
                return;
            }
            
            // Mevcut tabloyu ve mevcut spinner'ları temizle
            $constraintTableBody.children('table').first().hide();
            $constraintTableBody.find('.loading-spinner').remove();
            
            // Yükleme animasyonunu ekle (Educator ve Class sayfalarında kullanılan stil ile aynı)
            $constraintTableBody.append('<div style="display: flex; align-items: center; justify-content: center; position: absolute; top: 0; right: 0; bottom: 0; left: 0; background-color: rgba(255, 255, 255, 0.5); z-index: 1000;" class="loading-spinner"><div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div></div>');
            
            // Seçilen butonun verilerini al
            const classCourseId = selectedConstraintButton ? parseInt(selectedConstraintButton.data('classcourse-id')) : 0;
            const classroomId = currentClassroomId;
            
            // Controller'a gönderilecek veri
            const requestData = {
                ClassroomId: classroomId,
                ClassCourseId: classCourseId
            };
            
            // AJAX isteği gönder
            $.ajax({
                url: '/Constraint/GetConstraintsForClassroom',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(requestData),
                success: function(data) {
                    // Constraint tablosunu güncelle
                    $constraintTableBody.html(data);
                    
                    // UnsavedChanges durumu sıfırla
                    hasUnsavedChanges = false;
                    constraintsToAdd = [];
                    constraintsToRemove = [];
                    
                    // Değişiklik uyarısını gizle
                    $('#constraintChangeAlert').hide();
                },
                error: function(xhr, status, error) {
                    console.error("AJAX hatası:", status, error);
                    $constraintTableBody.find('.loading-spinner').remove();
                    $constraintTableBody.html('<div class="text-center py-5"><i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i><h5 class="text-danger">Error loading schedule</h5></div>');
                }
            });
        }

        // Yerel olarak constraint ekleme
        function AddConstraintLocal(element, dayId, lessonId) {
            console.log("AddConstraintLocal called for day:", dayId, "lesson:", lessonId);
            
            // Seçili kısıtlama tipine göre ClassCourseId değerini belirle
            const classCourseId = selectedConstraintButton ? parseInt(selectedConstraintButton.data('classcourse-id')) : 0;
            
            // Eğer hiçbir buton seçili değilse uyarı ver ve işlemi sonlandır
            if (!selectedConstraintButton) {
                toastr.warning('Please select a constraint type from the options panel first');
                return;
            }
            
            // Constraint verilerini oluştur
            const constraintData = {
                ClassroomId: currentClassroomId,
                DayId: dayId,
                LessonId: lessonId,
                ClassCourseId: classCourseId
            };
            
            // Eğer bu bir "closed" kısıtlaması ise (ClassCourseId = 0)
            if (classCourseId === 0) {
                $(element).css('background-color', '#FFD700'); // Gold for unsaved closed
                $(element).html('<div style="font-weight: bold; font-size: 0.9em;">Classroom Not Available</div>');
            } else {
                // Bu bir ders kısıtlaması
                const courseCode = selectedConstraintButton.data('course-code');
                const courseName = selectedConstraintButton.data('course-name');
                const className = selectedConstraintButton.data('class-name');
                
                $(element).css('background-color', '#6FC276'); // Green for unsaved course
                $(element).html(`<div style="font-weight: bold; font-size: 0.9em;">${courseCode}<br>${courseName}<br>(${className})</div>`);
            }
            
            // Kaydedilmemiş değişiklik olarak işaretle
            $(element).attr('data-unsaved', 'true');
            $(element).attr('data-constraint-data', JSON.stringify(constraintData));
            
            // Click işlevini değiştir (artık RemoveConstraintLocal'ı çağırsın)
            $(element).attr('onclick', `RemoveConstraintLocal(this, ${dayId}, ${lessonId})`);
            
            // Hover efektlerini güncelle
            $(element).attr('onmouseover', "this.style.cursor='pointer'; this.style.opacity='0.8';");
            $(element).attr('onmouseout', "this.style.opacity='1';");
            
            // Kaydedilmemiş değişiklikleri takip etmek için listeye ekle
            // Daha önce aynı day/lesson için bir ekleme varsa çıkar
            constraintsToAdd = constraintsToAdd.filter(item => 
                !(item.DayId === dayId && item.LessonId === lessonId)
            );
            
            // constraintsToAdd listesine ekle
            constraintsToAdd.push(constraintData);
            
            // Kaydedilmemiş değişiklikler var işaretini güncelle
            updateHasUnsavedChanges();
        }
        
        // Yerel olarak constraint kaldırma
        function RemoveConstraintLocal(element, dayId, lessonId) {
            console.log("RemoveConstraintLocal called for day:", dayId, "lesson:", lessonId);
            
            // Değişiklik kayıtlı mı yoksa kaydedilmemiş mi kontrol et
            const isUnsaved = $(element).attr('data-unsaved') === 'true';
            
            if (isUnsaved) {
                // Kaydedilmemiş bir değişiklik - tamamen geri al
                $(element).removeAttr('data-unsaved');
                $(element).removeAttr('data-constraint-data');
                $(element).css('background-color', 'white');
                $(element).empty();
                
                // Click işlevini AddConstraintLocal'a geri çevir
                $(element).attr('onclick', `AddConstraintLocal(this, ${dayId}, ${lessonId})`);
                
                // Hover efektlerini geri al
                $(element).attr('onmouseover', "this.style.cursor='pointer'; this.style.backgroundColor='#f5f5f5';");
                $(element).attr('onmouseout', "this.style.backgroundColor='white';");
                
                // constraintsToAdd listesinden çıkar
                constraintsToAdd = constraintsToAdd.filter(item => 
                    !(item.DayId === dayId && item.LessonId === lessonId)
                );
            } else {
                // Kayıtlı bir kısıtlama - silmek için işaretle
                $(element).attr('data-unsaved', 'true');
                $(element).attr('data-removed', 'true');
                $(element).css('background-color', 'white');
                $(element).html('');
                
                // Click işlevini AddConstraintLocal'a çevir
                $(element).attr('onclick', `AddConstraintLocal(this, ${dayId}, ${lessonId})`);
                
                // constraintsToRemove listesine ekle
                let constraintData = {};
                try {
                    constraintData = JSON.parse($(element).attr('data-constraint-data') || '{}');
                } catch (e) {
                    console.error("JSON parse error:", e);
                }
                
                // constraintsToRemove listesine ekle
                constraintsToRemove.push({
                    ClassroomId: currentClassroomId,
                    DayId: dayId,
                    LessonId: lessonId,
                    ClassCourseId: constraintData.ClassCourseId || 0
                });
            }
            
            // Kaydedilmemiş değişiklikler var işaretini güncelle
            updateHasUnsavedChanges();
        }
        
        // Tüm değişiklikleri kaydetme
        function saveAllChanges() {
            if (!hasUnsavedChanges) {
                return;
            }
            
            // Değişiklikleri hazırla
            const changes = {
                ClassroomId: currentClassroomId,
                ConstraintsToAdd: constraintsToAdd,
                ConstraintsToRemove: constraintsToRemove
            };
            
            // Debug için değişiklikleri göster
            console.log("Saving changes:", JSON.stringify(changes, null, 2));
            
            // Spinner oluştur ve göster
            const $constraintTableBody = $('#constraintTableBody');
            $constraintTableBody.css('position', 'relative');
            
            // Önceki spinner'ları temizle
            $constraintTableBody.find('.classroom-spinner-overlay').remove();
            
            // Spinner oluştur
            const $spinner = $('<div class="classroom-spinner-overlay"><div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div></div>');
            $constraintTableBody.append($spinner);
            $spinner.css('display', 'flex');
            
            // AJAX çağrısı ile değişiklikleri kaydet
            $.ajax({
                url: '/Constraint/SaveAllClassroomConstraints',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(changes),
                success: function(response) {
                    // Spinner gizle
                    $spinner.remove();
                    
                    console.log("Success response:", response);
                    
                    if (response.success) {
                        // Başarılı mesajı göster
                        Swal.fire({
                            icon: 'success',
                            title: 'Changes Saved',
                            text: response.message || 'All changes have been saved successfully.',
                            confirmButtonText: 'OK'
                        });
                        
                        // UnsavedChanges durumu sıfırla
                        hasUnsavedChanges = false;
                        constraintsToAdd = [];
                        constraintsToRemove = [];
                        
                        // Değişiklik uyarısını gizle
                        $('#constraintChangeAlert').hide();
                    } else {
                        // Başarısız mesajı göster
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message || 'An error occurred while saving changes.',
                            confirmButtonText: 'OK'
                        });
                    }
                },
                error: function(xhr, status, error) {
                    // Spinner gizle
                    $spinner.remove();
                    
                    // XHR yanıtını ve hata detaylarını yazdır
                    console.error("AJAX hatası:", status, error);
                    console.error("XHR yanıtı:", xhr.responseText);
                    
                    // Hata mesajını hazırla
                    var errorMessage = "An unknown error occurred. Please try again.";
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    }
                    
                    // Hata mesajını göster
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: errorMessage,
                        confirmButtonText: 'OK'
                    });
                }
            });
        }
        
        // Değişiklikleri iptal etme
        function cancelChanges() {
            if (!hasUnsavedChanges) {
                return;
            }
            
            // Onay sorusu göster
            Swal.fire({
                title: 'Cancel Changes?',
                text: "Any unsaved changes will be lost. This action cannot be undone!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, cancel changes',
                cancelButtonText: 'No, keep editing'
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log("Değişiklikler iptal ediliyor");
                    
                    // Tüm hücreleri yeniden yükle
                    RefreshConstraints();
                }
            });
        }
        
        // Tüm kısıtlamaları temizleme
        function clearAllConstraints() {
            Swal.fire({
                title: 'Clear All Classroom Constraints?',
                text: "This will remove all 'Closed' constraints for this classroom. This action cannot be undone!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, clear constraints',
                cancelButtonText: 'No, cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Spinner oluştur ve göster
                    const $constraintTableBody = $('#constraintTableBody');
                    $constraintTableBody.css('position', 'relative');
                    
                    // Önceki spinner'ları temizle
                    $constraintTableBody.find('.classroom-spinner-overlay').remove();
                    
                    // Spinner oluştur
                    const $spinner = $('<div class="classroom-spinner-overlay"><div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div></div>');
                    $constraintTableBody.append($spinner);
                    $spinner.css('display', 'flex');
                    
                    // API isteği gönder
                    $.ajax({
                        url: '/Constraint/ClearAllClassroomConstraints',
                        type: 'DELETE',
                        contentType: 'application/json',
                        data: JSON.stringify({ ClassroomId: currentClassroomId }),
                        success: function(response) {
                            // Spinner gizle
                            $spinner.remove();
                            
                            console.log("Success response:", response);
                            
                            if (response.success) {
                                // Başarılı mesajı göster
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Constraints Cleared',
                                    text: 'All classroom constraints have been cleared successfully.',
                                    confirmButtonText: 'OK'
                                });
                                
                                // UnsavedChanges durumu sıfırla
                                hasUnsavedChanges = false;
                                constraintsToAdd = [];
                                constraintsToRemove = [];
                                
                                // Değişiklik uyarısını gizle
                                $('#constraintChangeAlert').hide();
                            } else {
                                // Başarısız mesajı göster
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: response.message || 'An error occurred while clearing constraints.',
                                    confirmButtonText: 'OK'
                                });
                            }
                        },
                        error: function(xhr, status, error) {
                            // Spinner gizle
                            $spinner.remove();
                            
                            console.error("AJAX hatası:", status, error);
                            
                            // Hata mesajını hazırla
                            var errorMessage = "An unknown error occurred. Please try again.";
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }
                            
                            // Hata mesajını göster
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: errorMessage,
                                confirmButtonText: 'OK'
                            });
                        }
                    });
                }
            });
        }

        // Değişiklik durumunu güncelleme
        function updateHasUnsavedChanges() {
            hasUnsavedChanges = constraintsToAdd.length > 0 || constraintsToRemove.length > 0;
            
            if (hasUnsavedChanges) {
                $('#constraintChangeAlert').show();
            } else {
                $('#constraintChangeAlert').hide();
            }
        }
    </script>
}