@{
    ViewBag.MenuHead = "Management";
    ViewBag.Controller = "Time";
    ViewBag.Action = "Details";
    ViewBag.Title = "Time Details";
    var Lessons = ViewBag.Lessons;
    int counter = 0;
}
@using GWOTimetable.Models;
@model Workspace
<div class="row">
    <div class="col-md-6">
        <div class="card card-info card-outline">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title"><i class="fas fa-calendar"></i> &ensp;Day Settings</h3>

                <div class="ml-auto">
                    <button type="button" id="saveDaysButton" class="btn btn-outline-success btn-sm ml-1" hidden>
                        <i class="fas fa-save"></i>&nbsp; Save
                    </button>
                    <button type="button" id="closeDaysEditButton" class="btn btn-outline-info btn-sm ml-1" hidden>
                        <i class="fas fa-xmark"></i>&nbsp; Close
                    </button>
                    <button type="button" id="editDaysButton" class="btn btn-outline-info btn-sm ml-1">
                        <i class="fas fa-edit"></i>&nbsp; Edit
                    </button>
                </div>
            </div>

            <div class="card-body">
                <div class="row">
                    <div class="form-group col-md-6">
                        <label>Day of Week</label>
                    </div>

                    <div class="form-group col-md-3">
                        <label>Short Name</label>
                    </div>

                    <div class="form-group col-md-3">
                        <label>Lesson Count</label>
                    </div>
                </div>
                @foreach (var day in Model.Days)
                {
                    <div class="row days">
                        <div class="form-group col-md-6">
                            <input type="text" name="Days[@@index].DayId" class="form-control day-Id" value="@day.DayId"
                                hidden>
                            <input type="text" name="Days[@@index].DayOfWeek" class="form-control day-of-week"
                                maxlength="20" value="@day.DayOfWeek" disabled>
                        </div>
                        <div class="form-group col-md-3">
                            <input type="text" name="Days[@@index].ShortName" class="form-control day-short-name"
                                maxlength="5" value="@day.ShortName" disabled>
                        </div>
                        <div class="form-group col-md-3">
                            <select class="form-control select2bs4 day-lesson-count" name="Days[@@index].LessonCount"
                                disabled>
                                @for (int s = 0; s <= Model.Lessons.Count(); s++)
                                {
                                    if (s == day.LessonCount)
                                    {
                                        <option selected value=@s>@s</option>
                                    }
                                    else
                                    {
                                        <option value=@s>@s</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>

                }

            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card card-info card-outline">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title"><i class="fas fa-clock"></i> &ensp;Lesson Time Settings</h3>

                <div class="ml-auto">
                    <button type="button" id="saveLessonsButton" class="btn btn-outline-success btn-sm ml-1" hidden>
                        <i class="fas fa-save"></i>&nbsp; Save
                    </button>
                    <button type="button" id="closeLessonsEditButton" class="btn btn-outline-info btn-sm ml-1" hidden>
                        <i class="fas fa-xmark"></i>&nbsp; Close
                    </button>
                    <button type="button" id="editLessonsButton" class="btn btn-outline-info btn-sm ml-1">
                        <i class="fas fa-edit"></i>&nbsp; Edit
                    </button>
                </div>
            </div>

            <div class="card-body">


                <div class="row">
                    <div class="form-group col-md-2">
                        <label>Number</label>
                    </div>

                    <div class="form-group col-md-4">
                        <label>Starting Time</label>
                    </div>

                    <div class="form-group col-md-4">
                        <label>Ending Time</label>
                    </div>
                </div>
                @foreach (var lesson in Model.Lessons)
                {
                    <div class="row lessons">
                        <div class="form-group col-md-2">
                            <input type="text" name="Lessons[@counter].LessonId" class="form-control lesson-Id"
                                value="@lesson.LessonId" hidden>
                            <input type="text" name="Lessons[@counter].LessonNumber" class="form-control lesson-number"
                                value="@lesson.LessonNumber" disabled>
                        </div>

                        <div class="form-group col-md-4">
                            <div class="input-group date" id="LessonStartTimePicker-@counter" data-target-input="nearest">
                                <input type="text" name="Lessons[@counter].StartTime"
                                    class="form-control datetimepicker-input start-time"
                                    data-target="#LessonStartTimePicker-@counter" value="@lesson.StartTime" disabled />
                                <div class="input-group-append" data-target="#LessonStartTimePicker-@counter"
                                    data-toggle="datetimepicker">
                                    <div class="input-group-text"><i class="far fa-clock"></i></div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group col-md-4">
                            <div class="input-group date" id="LessonEndTimePicker-@counter" data-target-input="nearest">
                                <input type="text" name="Lessons[@counter].EndTime"
                                    class="form-control end-time datetimepicker-input"
                                    data-target="#LessonEndTimePicker-@counter" value="@lesson.EndTime" disabled />
                                <div class="input-group-append" data-target="#LessonEndTimePicker-@counter"
                                    data-toggle="datetimepicker">
                                    <div class="input-group-text"><i class="far fa-clock"></i></div>
                                </div>
                            </div>
                        </div>

                        @if (lesson.LessonNumber == Model.Lessons.Count)
                        {
                            <div class="form-group col-md-2">
                                <button class="btn btn-danger delete-lesson-button" id="deleteLessonButton" data-lesson-id="@lesson.LessonId"
                                    data-lesson-number="@lesson.LessonNumber" data-starting-time="@lesson.StartTime"
                                    data-ending-time="@lesson.EndTime" data-toggle="modal" data-target="#deleteLessonModal" hidden>
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                    counter++;
                }

                <div class="row" id="addNewLessonDiv" hidden>
                    <div class="form-group col-md-2">
                        <input type="text" class="form-control" value="@(@Model.Lessons.Count + 1)" disabled>
                    </div>

                    <div class="form-group col-md-4">
                        <div class="bootstrap-timepicker">
                            <div class="form-group">
                                <div class="input-group date" id="starttimepicker" data-target-input="nearest">
                                    <input type="text" class="form-control datetimepicker-input"
                                        data-target="#starttimepicker" />
                                    <div class="input-group-append" data-target="#starttimepicker"
                                        data-toggle="datetimepicker">
                                        <div class="input-group-text"><i class="far fa-clock"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-4">
                        <div class="bootstrap-timepicker">
                            <div class="form-group">
                                <div class="input-group date" id="endtimepicker" data-target-input="nearest">
                                    <input type="text" class="form-control datetimepicker-input"
                                        data-target="#endtimepicker" />
                                    <div class="input-group-append" data-target="#endtimepicker"
                                        data-toggle="datetimepicker">
                                        <div class="input-group-text"><i class="far fa-clock"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="form-group col-md-2">
                        <button class="btn btn-success" id="addLessonButton">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteLessonModal" tabindex="-1" role="dialog" aria-labelledby="deleteLessonModalLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteLessonModalLabel"><i class="fas fa-exclamation-circle"></i>&nbsp;
                    Delete
                    Confirmation</h5>
                <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <dt>Are you sure you want to delete this lesson?</dt>
                <dd>All settings related to this lesson will be deleted.</dd>
                <br>
                <dl class="row">
                    <dt class="col-sm-4">Lesson Number</dt>
                    <dd class="col-sm-8" id="deleteLessonNumber"></dd>
                    <dt class="col-sm-4">Starting Time</dt>
                    <dd class="col-sm-8" id="deleteStartingTime"></dd>
                    <dt class="col-sm-4">Ending Time</dt>
                    <dd class="col-sm-8" id="deleteEndingTime"></dd>
                </dl>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-lesson-id=""
                    id="confirmDeleteLessonButton">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script>
        $(document).ready(function () {
            $.ajax({
                url: '@Url.Action("GetWorkspaceSelectList", "Workspace")',
                // Doğru URL'yi yaz
                type: 'GET',
                success: function (response) {

                    $('#selectedWorkspace').html(response);
                    $('#workspace').attr('disabled', 'disabled');
                },
                error: function (xhr, status, error) {
                    $('#selectedWorkspace').html("Error loading partial view:");
                }
            });
        });
    </script>


    <script>
        $(document).ready(function () {
            $('#editDaysButton').click(function () {
                $('.day-lesson-count,.day-of-week,.day-short-name').removeAttr('disabled');
                $('#saveDaysButton,#closeDaysEditButton').removeAttr('hidden');
                $('#editDaysButton').attr('hidden', true);
            });


            $('#closeDaysEditButton').click(function () {
                $('.day-lesson-count,.day-of-week,.day-short-name').attr('disabled', true);
                $('#saveDaysButton,#closeDaysEditButton').attr('hidden', true);
                $('#editDaysButton').removeAttr('hidden');
            });

            $('#saveDaysButton').click(function () {
                const rows = document.querySelectorAll(".days");
                const days = [];

                rows.forEach(row => {
                    const dayId = row.querySelector('input[name$="DayId"]').value;
                    const dayOfWeek = row.querySelector('input[name$="DayOfWeek"]').value;
                    const shortName = row.querySelector('input[name$="ShortName"]').value;
                    const lessonCount = row.querySelector('select[name$="LessonCount"]').value;

                    days.push({ DayId: dayId, DayOfWeek: dayOfWeek, ShortName: shortName, LessonCount: parseInt(lessonCount) });
                });


                $.ajax({
                    url: '@Url.Action("UpdateDays", "Time")',
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(days),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Day settings updated successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });
            });

        });
    </script>
    <script>
        $(document).ready(function () {
            $('#editLessonsButton').click(function () {
                $('.start-time,.end-time').removeAttr('disabled');
                $('#saveLessonsButton,#closeLessonsEditButton,#addNewLessonDiv,#deleteLessonButton').removeAttr('hidden');
                $('#editLessonsButton').attr('hidden', true);
            });


            $('#closeLessonsEditButton').click(function () {
                $('.start-time,.end-time').attr('disabled', true);
                $('#saveLessonsButton,#closeLessonsEditButton,#addNewLessonDiv,#deleteLessonButton').attr('hidden', true);
                $('#editLessonsButton').removeAttr('hidden');
            });

            $('#saveLessonsButton').click(function () {
                const rows = document.querySelectorAll(".lessons");
                const lessons = [];

                rows.forEach(row => {
                    const lessonId = row.querySelector('input[name$="LessonId"]').value;
                    const lessonNumber = row.querySelector('input[name$="LessonNumber"]').value;
                    const startTime = row.querySelector('input[name$="StartTime"]').value;
                    const endTime = row.querySelector('input[name$="EndTime"]').value;

                    lessons.push({ LessonId: lessonId, LessonNumber: lessonNumber, StartTime: startTime, EndTime: endTime });
                });


                $.ajax({
                    url: '@Url.Action("UpdateLessons", "Time")',
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(lessons),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Lesson settings updated successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });
            });

        });
    </script>
    <script>
        $(document).ready(function () {
            $('#addLessonButton').click(function () {
                var lessonData = {
                    StartTime: $('#starttimepicker input').val(), // Eğer starttimepicker da aynı mantıkla kullanıldıysa
                    EndTime: $('#endtimepicker input').val() // Doğru input değerini almak için
                };


                $.ajax({
                    url: '@Url.Action("AddLesson", "Time")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(lessonData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Lesson added successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again.";
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });

            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $('.delete-lesson-button').on('click', function () {
                const lessonId = $(this).data('lesson-id');
                $('#deleteLessonNumber').text($(this).data('lesson-number'));
                $('#deleteStartingTime').text($(this).data('starting-time'));
                $('#deleteEndingTime').text($(this).data('ending-time'));

                $('#confirmDeleteLessonButton').data('lesson-id', lessonId);
            });

            $('#confirmDeleteLessonButton').on('click', function () {

                const lessonId = parseInt($(this).data('lesson-id'));

                const lessonData = {
                    LessonId: lessonId
                };

                $.ajax({
                    url: '@Url.Action("DeleteLesson", "Time")',
                    type: 'DELETE',
                    contentType: 'application/json',
                    data: JSON.stringify(lessonData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Lesson deleted successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                });
            });
        });

    </script>

    <script>
        $(function () {
            document.querySelectorAll('.input-group.date').forEach(element => {
                $(element).datetimepicker({
                    format: 'HH:mm'
                });
            });

        })
    </script>
}