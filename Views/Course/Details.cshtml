@{
    ViewBag.MenuHead = "Management";
    ViewBag.Controller = "Course";
    ViewBag.Action = "Details";
    ViewBag.Title = "Course Details";
}
@using GWOTimetable.Models;
@model Course
<div class="card card-info card-outline">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h3 class="card-title"><i class="fas fa-circle-info"></i> &ensp;Course Details</h3>

        <div class="ml-auto">
            <button class="btn btn-outline-danger btn-sm delete-course-button" data-course-id="@Model.CourseId"
                data-course-code="@Model.CourseCode" data-course-name="@Model.CourseName" data-toggle="modal"
                data-target="#deleteCourseModal" id="deleteCourseButton" hidden>
                <i class="fas fa-trash"></i>&nbsp; Delete
            </button>
            <button type="button" id="saveCourseButton" class="btn btn-outline-success btn-sm ml-1" hidden>
                <i class="fas fa-save"></i>&nbsp; Save
            </button>
            <button type="button" id="closeEditButton" class="btn btn-outline-info btn-sm ml-1" hidden>
                <i class="fas fa-xmark"></i>&nbsp; Close
            </button>
            <button type="button" id="editCourseButton" class="btn btn-outline-info btn-sm ml-1">
                <i class="fas fa-edit"></i>&nbsp; Edit
            </button>

        </div>
    </div>

    <div class="card-body">
        <div class="form-group ">
            <label>Workspace</label>
            <div id="selectedWorkspace"> </div>
        </div>
        <div class=" row">

            <div class="form-group col-md-6">
                <label>Created At </label>
                <input type="text" class="form-control" value="@Model.CreatedAt" disabled>
            </div>

            <div class="form-group col-md-6">
                <label>Updated At </label>
                <input type="text" class="form-control"
                    value="@(Model.UpdatedAt.HasValue ? Model.UpdatedAt.ToString() : "Not updated yet.")" disabled>
            </div>

            <div class="form-group col-md-6">
                <label>Course Code </label>
                <input type="text" class="form-control" value="@Model.CourseCode" id="courseCode" maxlength="15"
                    disabled>
            </div>

            <div class="form-group col-md-6">
                <label>Course Name </label>
                <input type="text" class="form-control" value="@Model.CourseName" id="courseName" maxlength="100"
                    disabled>
            </div>
            <div class="form-group col-md-6">
                <label>Weekly Hour Count</label>
                <select class="form-control select2bs4 select2-hidden-accessible" id="weeklyHourCount" disabled>
                    <option value="0">Select Weekly Hour Count</option>
                    @for (int s = 1; s <= 10; s++)
                    {
                        if (s == Model.WeeklyHourCount)
                        {
                            <option selected value=@s>@s Hour</option>
                        }
                        else
                        {
                            <option value=@s>@s Hour</option>
                        }

                    }
                </select>
            </div>

            <div class="form-group col-md-6">
                <label>Placement Format</label>
                <select class="form-control select2bs4 select2-hidden-accessible" id="placementFormat" disabled>
                    <option>@Model.PlacementFormat</option>
                </select>
            </div>

            <div class="form-group col-md-12">
                <label>Description</label>
                <textarea class="form-control" id="courseDescription" rows="2" maxlength="250" disabled>
                    @if (string.IsNullOrEmpty(Model.Description))
                    {
                        @("No description.".Trim())
                    }
                    else if (Model.Description.Length > 60)
                    {
                        @(Model.Description.Substring(0, 60).Trim() + "...")
                    }
                    else
                    {
                        @(Model.Description.Trim())
                    }
                </textarea>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteCourseModal" tabindex="-1" role="dialog" aria-labelledby="deleteCourseModalLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteCourseModalLabel"><i class="fas fa-exclamation-circle"></i>&nbsp;
                    Delete
                    Confirmation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <dt>Are you sure you want to delete this course?</dt>
                <br>
                <dl class="row">
                    <dt class="col-sm-4">Course Code</dt>
                    <dd class="col-sm-8" id="deleteCourseCode"></dd>
                    <dt class="col-sm-4">Course Name</dt>
                    <dd class="col-sm-8" id="deleteCourseName"></dd>

                </dl>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-course-id=""
                    id="confirmDeleteCourseButton">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script>

        $(document).ready(function () {
            $.ajax({
                url: '@Url.Action("GetWorkspaceSelectList", "Workspace")',
                // Doğru URL'yi yaz
                type: 'GET',
                success: function (response) {

                    $('#selectedWorkspace').html(response);

                    $('#workspace').attr('disabled', 'disabled');
                },
                error: function (xhr, status, error) {
                    $('#selectedWorkspace').html("Error loading partial view:");
                }
            });
        });
    </script>


    <script>
        $(document).ready(function () {
            $('.delete-course-button').on('click', function () {
                const courseId = $(this).data('course-id');
                $('#deleteCourseCode').text($(this).data('course-code'));
                $('#deleteCourseName').text($(this).data('course-name'));
                $('#confirmDeleteCourseButton').data('course-id', courseId);
            });

            $('#confirmDeleteCourseButton').on('click', function () {

                const courseId = parseInt($(this).data('course-id'));

                const courseData = {
                    CourseId: courseId
                };

                $.ajax({
                    url: '@Url.Action("DeleteCourse", "Course")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(courseData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Course deleted successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                });
            });
        });

    </script>


    <script>
        $(document).ready(function () {
            $('#editCourseButton').click(function () {
                $('#courseCode,#courseName,#weeklyHourCount,#placementFormat,#courseDescription').removeAttr('disabled');
                $('#saveCourseButton,#deleteCourseButton,#closeEditButton').removeAttr('hidden');
                $('#editCourseButton').attr('hidden', true);
                $('#weeklyHourCount').change();
            });


            $('#closeEditButton').click(function () {
                $('#courseCode,#courseName,#weeklyHourCount,#placementFormat,#courseDescription').attr('disabled', true);
                $('#saveCourseButton,#deleteCourseButton,#closeEditButton').attr('hidden', true);
                $('#editCourseButton').removeAttr('hidden');
            });

            $('#saveCourseButton').click(function () {
                var courseData = {
                    CourseId: parseInt('@Model.CourseId'),
                    CourseCode: $('#courseCode').val(),
                    CourseName: $('#courseName').val(),
                    WeeklyHourCount: parseInt($('#weeklyHourCount').val()),
                    PlacementFormat: $('#placementFormat').val(),
                    Description: $('#courseDescription').val()
                };


                $.ajax({
                    url: '@Url.Action("UpdateCourse", "Course")',
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(courseData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Course updated successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayılan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                });
            });

        });

    </script>

    <script>
        $(document).ready(function () {
            $('#weeklyHourCount').on('change', function () {
                var weeklyHourValue = parseInt($(this).val());
                const placementFormat = document.getElementById('placementFormat');

                placementFormat.innerHTML = '';

                const option = document.createElement('option');
                option.value = "";
                option.text = "Select Placement Format";
                placementFormat.appendChild(option);

                if (!isNaN(weeklyHourValue)) {
                    const variations = getVariations(weeklyHourValue);

                    const selectedFormat = @Html.Raw(Json.Serialize(Model.PlacementFormat));

                    variations.forEach(variation => {
                        const option = document.createElement('option');
                        option.value = variation;
                        option.textContent = variation;
                        if (variation === selectedFormat) { // Düzgün karşılaştırma
                            option.selected = true;
                        }
                        placementFormat.appendChild(option);
                    });

                }
            });
        });


        function getVariations(number) {
            if (number === 0) {
                return [''];
            }

            const results = [];
            for (let i = 1; i <= number; i++) {
                const subVariations = getVariations(number - i);

                subVariations.forEach(variation => {
                    results.push(i + (variation === '' ? '' : ',' + variation));
                });
            }

            for (let index = 0; index < results.length; index++) {
                const v = results[index].split(",").map(x => parseInt(x));
                for (let j = 0; j < v.length - 1; j++) {
                    if (v[j] < v[j + 1]) {
                        results.splice(index, 1);
                        index--;
                        break;
                    }
                }
            }

            results.reverse();
            return results;
        }
    </script>

}