@{
    ViewBag.MenuHead = "Management";
    ViewBag.Controller = "Course";
    ViewBag.Action = "Details";
    ViewBag.Title = "Course Details";
}
@using GWOTimetable.Models;
@using System.Security.Claims
@model Course
<div class="card card-info card-outline">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h3 class="card-title"><i class="fas fa-circle-info"></i> &ensp;Course Details</h3>

        <div class="ml-auto">
            <button class="btn btn-outline-danger btn-sm delete-course-button" data-course-id="@Model.CourseId"
                data-course-code="@Model.CourseCode" data-course-name="@Model.CourseName" data-toggle="modal"
                data-target="#deleteCourseModal" id="deleteCourseButton" hidden>
                <i class="fas fa-trash"></i>&nbsp; Delete
            </button>
            <button type="button" id="saveCourseButton" class="btn btn-outline-success btn-sm ml-1" hidden>
                <i class="fas fa-save"></i>&nbsp; Save
            </button>
            <button type="button" id="closeEditButton" class="btn btn-outline-info btn-sm ml-1" hidden>
                <i class="fas fa-xmark"></i>&nbsp; Close
            </button>
            <button type="button" id="editCourseButton" class="btn btn-outline-info btn-sm ml-1">
                <i class="fas fa-edit"></i>&nbsp; Edit
            </button>

        </div>
    </div>

    <div class="card-body">
        <div class="form-group ">
            <label>Workspace</label>
            <select class="form-control select2bs4 select2-hidden-accessible" disabled style="width: 100%;">
                <option value="0">@User.FindFirstValue("WorkspaceName")</option>
            </select>
        </div>
        <div class=" row">

            <div class="form-group col-md-6">
                <label>Created At </label>
                <input type="text" class="form-control" value="@Model.CreatedAt" disabled>
            </div>

            <div class="form-group col-md-6">
                <label>Updated At </label>
                <input type="text" class="form-control"
                    value="@(Model.UpdatedAt.HasValue ? Model.UpdatedAt.ToString() : "Not updated yet.")" disabled>
            </div>

            <div class="form-group col-md-6">
                <label>Course Code </label>
                <input type="text" class="form-control" value="@Model.CourseCode" id="courseCode" maxlength="15"
                    disabled>
            </div>

            <div class="form-group col-md-6">
                <label>Course Name </label>
                <input type="text" class="form-control" value="@Model.CourseName" id="courseName" maxlength="100"
                    disabled>
            </div>
            <div class="form-group col-md-6">
                <label>Weekly Hour Count</label>
                <select class="form-control select2bs4 select2-hidden-accessible" id="weeklyHourCount" disabled
                    style="width: 100%;">
                    <option value="0">Select Weekly Hour Count</option>
                    @for (int s = 1; s <= 10; s++)
                    {
                        if (s == Model.WeeklyHourCount)
                        {
                            <option selected value=@s>@s Hour</option>
                        }
                        else
                        {
                            <option value=@s>@s Hour</option>
                        }
                    }
                </select>
            </div>

            <div class="form-group col-md-6">
                <label>Placement Format</label>
                <select class="form-control select2bs4 select2-hidden-accessible" id="placementFormat" disabled
                    style="width: 100%;">
                    <option>@Model.PlacementFormat</option>
                </select>
            </div>

            <div class="form-group col-md-12">
                <label>Description</label>
                <textarea class="form-control" id="courseDescription" rows="2" maxlength="250" disabled>
                    @if (string.IsNullOrEmpty(Model.Description))
                    {
                                    @("No description.".Trim())
                    }
                    else
                    {
                                    @(Model.Description.Trim())
                    }
                </textarea>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-9">
        <div class="card card-gray card-outline">
            <div class="card-body p-0 table-responsive" id="constraintTableBody">
                <div class="text-center py-5">
                    <i class="fas fa-calendar-days fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Please select a course from the options panel to view the timetable</h5>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-3">
        <div class="card card-gray card-outline">
            <div class="card-header d-flex align-items-center">
                <h3 class="card-title pt-1 pb-1"><i class="fas fa-calendar-days"></i>&nbsp; Options</h3>
            </div>
            <div class="card-body">
                @foreach (var cc in Model.ClassCourses)
                {
                    <button type="button" class="btn btn-outline-primary btn-block constraint-option-button mb-2" 
                            data-classcourse-id="@cc.ClassCourseId" 
                            data-course-id="@Model.CourseId"
                            data-course-code="@Model.CourseCode"
                            data-course-name="@Model.CourseName"
                            data-classroom="@cc.Classroom.ClassroomName">
                        (@cc.Class.ClassName) - @cc.Classroom.ClassroomName<br>
                        @cc.Educator.FirstName @cc.Educator.LastName
                    </button>
                }
                <button type="button" class="btn btn-outline-danger btn-block pt-3 pb-3 constraint-option-button" 
                        data-classcourse-id="0" 
                        data-course-id="@Model.CourseId"
                        data-course-code="CLOSE"
                        data-course-name="Close Time Slot"
                        data-classroom="">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteCourseModal" tabindex="-1" role="dialog" aria-labelledby="deleteCourseModalLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteCourseModalLabel"><i class="fas fa-exclamation-circle"></i>&nbsp;
                    Delete
                    Confirmation</h5>
                <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <dt>Are you sure you want to delete this course?</dt>
                <dd>All settings related to this course will be deleted.</dd>
                <br>
                <dl class="row">
                    <dt class="col-sm-4">Course Code</dt>
                    <dd class="col-sm-8" id="deleteCourseCode"></dd>
                    <dt class="col-sm-4">Course Name</dt>
                    <dd class="col-sm-8" id="deleteCourseName"></dd>

                </dl>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-course-id=""
                    id="confirmDeleteCourseButton">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script>
        $(document).ready(function () {
            $('.delete-course-button').on('click', function () {
                const courseId = $(this).data('course-id');
                $('#deleteCourseCode').text($(this).data('course-code'));
                $('#deleteCourseName').text($(this).data('course-name'));
                $('#confirmDeleteCourseButton').data('course-id', courseId);
            });

            $('#confirmDeleteCourseButton').on('click', function () {

                const courseId = parseInt($(this).data('course-id'));

                const courseData = {
                    CourseId: courseId
                };

                $.ajax({
                    url: '@Url.Action("DeleteCourse", "Course")',
                    type: 'DELETE',
                    contentType: 'application/json',
                    data: JSON.stringify(courseData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Course deleted successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayÄ±lan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });
            });
        });

    </script>

    <script>
        $(document).ready(function () {
            $('#editCourseButton').click(function () {
                $('#courseCode,#courseName,#weeklyHourCount,#placementFormat,#courseDescription').removeAttr('disabled');
                $('#saveCourseButton,#deleteCourseButton,#closeEditButton').removeAttr('hidden');
                $('#editCourseButton').attr('hidden', true);
                $('#weeklyHourCount').change();
            });


            $('#closeEditButton').click(function () {
                $('#courseCode,#courseName,#weeklyHourCount,#placementFormat,#courseDescription').attr('disabled', true);
                $('#saveCourseButton,#deleteCourseButton,#closeEditButton').attr('hidden', true);
                $('#editCourseButton').removeAttr('hidden');
            });

            $('#saveCourseButton').click(function () {
                var courseData = {
                    CourseId: parseInt('@Model.CourseId'),
                    CourseCode: $('#courseCode').val(),
                    CourseName: $('#courseName').val(),
                    WeeklyHourCount: parseInt($('#weeklyHourCount').val()),
                    PlacementFormat: $('#placementFormat').val(),
                    Description: $('#courseDescription').val()
                };


                $.ajax({
                    url: '@Url.Action("UpdateCourse", "Course")',
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(courseData),
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: "Course updated successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "An unknown error occurred. Please try again."; // varsayÄ±lan
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            toast: true,
                            icon: 'error',
                            title: errorMessage,
                            position: 'top',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    }
                });
            });

        });

    </script>

    <script>
        $(document).ready(function () {
            $('#weeklyHourCount').on('change', function () {
                var weeklyHourValue = parseInt($(this).val());
                const placementFormat = document.getElementById('placementFormat');

                placementFormat.innerHTML = '';

                const option = document.createElement('option');
                option.value = "";
                option.text = "Select Placement Format";
                placementFormat.appendChild(option);

                if (!isNaN(weeklyHourValue)) {
                    const variations = getVariations(weeklyHourValue);

                    const selectedFormat = @Html.Raw(Json.Serialize(Model.PlacementFormat));

                    variations.forEach(variation => {
                        const option = document.createElement('option');
                        option.value = variation;
                        option.textContent = variation;
                        if (variation === selectedFormat) { // DÃ¼zgÃ¼n karÅÄ±laÅtÄ±rma
                            option.selected = true;
                        }
                        placementFormat.appendChild(option);
                    });

                }
            });
        });


        function getVariations(number) {
            if (number === 0) {
                return [''];
            }

            const results = [];
            for (let i = 1; i <= number; i++) {
                const subVariations = getVariations(number - i);

                subVariations.forEach(variation => {
                    results.push(i + (variation === '' ? '' : ',' + variation));
                });
            }

            for (let index = 0; index < results.length; index++) {
                const v = results[index].split(",").map(x => parseInt(x));
                for (let j = 0; j < v.length - 1; j++) {
                    if (v[j] < v[j + 1]) {
                        results.splice(index, 1);
                        index--;
                        break;
                    }
                }
            }

            results.reverse();
            return results;
        }
    </script>

    <script>
        // Global deÄiÅken olarak current course ID'sini tanÄ±mla
        const currentCourseId = @Model.CourseId;
        var selectedConstraintButton;

        $(document).ready(function () {
            // Constraint buton tÄ±klamalarÄ±nÄ± dinle
            $('.constraint-option-button').on('click', function () {
                const courseId = $(this).data('course-id');
                const classCourseId = $(this).data('classcourse-id');
                
                // SeÃ§ili butonun gÃ¶rsel stilini gÃ¼ncelle
                $('.constraint-option-button').removeClass('active');
                $(this).addClass('active');
                
                // SeÃ§ili buton referansÄ±nÄ± sakla
                selectedConstraintButton = $(this);
                
                // AJAX ile kÄ±sÄ±tlama tablosunu yÃ¼kle
                loadConstraints(courseId, classCourseId);
            });
            
            // Ä°lk kÄ±sÄ±tlamayÄ± yÃ¼kleme fonksiyonu
            function loadConstraints(courseId, classCourseId) {
                const $constraintTableBody = $('#constraintTableBody');
                
                // YÃ¼kleme animasyonunu gÃ¶ster
                $constraintTableBody.html(`
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                        <h5 class="mt-2">Loading constraints...</h5>
                    </div>
                `);
                
                // KÄ±sÄ±tlama verilerini hazÄ±rla
                const constraintData = {
                    CourseId: courseId,
                    ClassCourseId: classCourseId
                };
                
                // AJAX isteÄi ile kÄ±sÄ±tlamalarÄ± yÃ¼kle
                $.ajax({
                    url: '/Constraint/GetConstraintsForCourse',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(constraintData),
                    success: function(response) {
                        $constraintTableBody.html(response);
                    },
                    error: function(xhr, status, error) {
                        $constraintTableBody.html(`
                            <div class="text-center py-5">
                                <i class="fas fa-exclamation-circle fa-3x text-danger mb-3"></i>
                                <h5 class="text-danger">Error loading constraints</h5>
                                <p>${xhr.responseText ? xhr.responseText : error}</p>
                            </div>
                        `);
                    }
                });
            }
        });

        // Global scope constraint manipulation functions
        function toggleConstraint(element, dayId, lessonId) {
            console.log("toggleConstraint called for day:", dayId, "lesson:", lessonId);
            
            // Check if we have an active "Close" button or a classCourse button
            const classCourseId = selectedConstraintButton ? parseInt(selectedConstraintButton.data('classcourse-id')) : 0;
            const courseName = selectedConstraintButton ? selectedConstraintButton.data('course-name') : '';
            
            if (!selectedConstraintButton) {
                Swal.fire({
                    toast: true,
                    icon: 'warning',
                    title: 'Please select a course from the options panel first',
                    position: 'top',
                    showConfirmButton: false,
                    timer: 3000
                });
                return;
            }
            
            const hasConstraint = $(element).css('background-color') !== 'rgb(255, 255, 255)';
            
            if (hasConstraint) {
                RemoveConstraintLocal(element, dayId, lessonId);
            } else {
                AddConstraintLocal(element, dayId, lessonId);
            }
        }

        function AddConstraintLocal(element, dayId, lessonId) {
            console.log("AddConstraintLocal called for day:", dayId, "lesson:", lessonId);
            
            // SeÃ§ili kÄ±sÄ±tlama tipine gÃ¶re ClassCourseId deÄerini belirle
            const classCourseId = selectedConstraintButton ? parseInt(selectedConstraintButton.data('classcourse-id')) : 0;
            const courseId = parseInt(currentCourseId);
            
            var constraintData = {
                DayId: dayId,
                LessonId: lessonId,
                ClassCourseId: classCourseId,
                CourseId: courseId
            };
            
            // Unsaved changes flag'ini aktif et
            hasUnsavedChanges = true;
            $('#constraintChangeAlert').show();
            
            // Constraint data'sÄ±nÄ± local deÄiÅkene kaydet
            var existingConstraintIndex = constraintsToRemove.findIndex(item => 
                item.DayId === dayId && item.LessonId === lessonId && item.CourseId === courseId
            );
            
            if (existingConstraintIndex !== -1) {
                // EÄer aynÄ± constraint remove listesinde varsa, onu oradan kaldÄ±r
                constraintsToRemove.splice(existingConstraintIndex, 1);
            } else {
                // constraintsToAdd listesinde zaten yoksa ekle
                const existsInAdd = constraintsToAdd.some(item => 
                    item.DayId === dayId && item.LessonId === lessonId && item.CourseId === courseId
                );
                
                if (!existsInAdd) {
                    constraintsToAdd.push(constraintData);
                }
            }
            
            // HÃ¼creye seÃ§ili kÄ±sÄ±tlama rengini ve data-unsaved attribute'unu ekle
            if (classCourseId === 0) {
                // 'Close' button selected (kÄ±rmÄ±zÄ± - kapalÄ± hÃ¼cre)
                $(element).css('background-color', '#FFD700'); // Unsaved closed cell
            } else {
                // Normal course button selected (mavi - ders atama)
                $(element).css('background-color', '#6FC276'); // Unsaved course cell
            }
            
            $(element).attr('data-unsaved', 'true');
            
            // KÄ±sÄ±tlama bilgisini gÃ¶ster
            if (classCourseId === 0) {
                $(element).text("Not Available");
                $(element).attr('title', "Not Available");
            } else {
                const courseInfo = selectedConstraintButton.data('course-name');
                $(element).text(courseInfo);
                $(element).attr('title', courseInfo);
            }
        }
        
        function RemoveConstraintLocal(element, dayId, lessonId) {
            console.log("RemoveConstraintLocal called for day:", dayId, "lesson:", lessonId);
            
            var constraintData = {};
            try {
                constraintData = {
                    DayId: dayId,
                    LessonId: lessonId,
                    CourseId: parseInt(currentCourseId)
                };
            } catch (error) {
                console.error("Error parsing constraint data:", error);
                return;
            }
            
            // Unsaved changes flag'ini aktif et
            hasUnsavedChanges = true;
            $('#constraintChangeAlert').show();
            
            // Local deÄiÅkenleri gÃ¼ncelle
            var existingAddIndex = constraintsToAdd.findIndex(item => 
                item.DayId === dayId && item.LessonId === lessonId && item.CourseId === constraintData.CourseId
            );
            
            if (existingAddIndex !== -1) {
                // EÄer aynÄ± constraint add listesinde varsa, onu oradan kaldÄ±r
                constraintsToAdd.splice(existingAddIndex, 1);
            } else {
                // constraintsToRemove listesinde zaten yoksa ekle
                const existsInRemove = constraintsToRemove.some(item => 
                    item.DayId === dayId && item.LessonId === lessonId && item.CourseId === constraintData.CourseId
                );
                
                if (!existsInRemove) {
                    constraintsToRemove.push(constraintData);
                }
            }
            
            // HÃ¼creyi temizle ve data-unsaved attribute'unu gÃ¼ncelle
            $(element).css('background-color', 'rgb(255, 255, 255)');
            $(element).text('');
            $(element).attr('title', '');
            $(element).attr('data-unsaved', 'true');
        }
        
        function saveAllChanges() {
            if (!hasUnsavedChanges) {
                return;
            }
            
            // Confirm before saving changes
            Swal.fire({
                title: 'Save Changes?',
                text: "Do you want to save all constraint changes?",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, save changes!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $('.spinner-overlay').css('display', 'flex');
                    
                    var changes = {
                        ConstraintsToAdd: constraintsToAdd,
                        ConstraintsToRemove: constraintsToRemove,
                        CourseId: parseInt(currentCourseId)
                    };
                    
                    $.ajax({
                        url: '/Constraint/SaveAllCourseConstraints',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(changes),
                        success: function(response) {
                            $('.spinner-overlay').hide();
                            
                            // Reset local tracking
                            constraintsToAdd = [];
                            constraintsToRemove = [];
                            hasUnsavedChanges = false;
                            $('#constraintChangeAlert').hide();
                            
                            // Update UI
                            $('[data-unsaved="true"]').each(function() {
                                $(this).attr('data-unsaved', 'false');
                                
                                // Set the correct background color for saved cells
                                if ($(this).css('background-color') === 'rgb(111, 194, 118)') { // Unsaved course
                                    $(this).css('background-color', '#ADD8E6'); // Saved course
                                } else if ($(this).css('background-color') === 'rgb(255, 215, 0)') { // Unsaved closed
                                    $(this).css('background-color', '#ffe6e6'); // Saved closed
                                } else if ($(this).css('background-color') === 'rgb(255, 255, 255)') {
                                    // Cell was cleared, keep it white
                                }
                            });
                            
                            Swal.fire({
                                toast: true,
                                icon: 'success',
                                title: 'Changes saved successfully!',
                                position: 'top',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        },
                        error: function(xhr, status, error) {
                            $('.spinner-overlay').hide();
                            console.error("AJAX hatasÄ±:", status, error);
                            
                            // XHR yanÄ±tÄ±nÄ± ve hata detaylarÄ±nÄ± yazdÄ±r
                            console.error("XHR response:", xhr.responseText);
                            
                            var errorMessage = "An unknown error occurred while saving changes.";
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }
                            
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: errorMessage,
                            });
                        }
                    });
                }
            });
        }
        
        function cancelChanges() {
            if (!hasUnsavedChanges) {
                return;
            }
            
            Swal.fire({
                title: 'Cancel Changes?',
                text: "All unsaved changes will be lost. Do you want to continue?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, cancel changes'
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log("DeÄiÅiklikler iptal ediliyor");
                    
                    // constraintsToAdd listesindeki tÃ¼m hÃ¼creler iÃ§in deÄiÅiklikleri geri al
                    constraintsToAdd.forEach(function(constraint) {
                        var cell = $(`#cell-${constraint.DayId}-${constraint.LessonId}`);
                        cell.css('background-color', 'rgb(255, 255, 255)');
                        cell.text('');
                        cell.attr('title', '');
                        cell.attr('data-unsaved', 'false');
                    });
                    
                    // constraintsToRemove listesindeki tÃ¼m hÃ¼creler iÃ§in orijinal deÄerleri geri yÃ¼kle
                    constraintsToRemove.forEach(function(constraint) {
                        var cell = $(`#cell-${constraint.DayId}-${constraint.LessonId}`);
                        
                        // Determine the constraint type (you might need additional data to determine this correctly)
                        var classCourseId = selectedConstraintButton ? parseInt(selectedConstraintButton.data('classcourse-id')) : 0;
                        
                        if (classCourseId === 0) {
                            cell.css('background-color', '#ffe6e6'); // Closed cell
                            cell.text('Not Available');
                            cell.attr('title', 'Not Available');
                        } else {
                            cell.css('background-color', '#ADD8E6'); // Course cell
                            var courseInfo = selectedConstraintButton.data('course-name');
                            cell.text(courseInfo);
                            cell.attr('title', courseInfo);
                        }
                        
                        cell.attr('data-unsaved', 'false');
                    });
                    
                    // Reset tracking variables
                    constraintsToAdd = [];
                    constraintsToRemove = [];
                    hasUnsavedChanges = false;
                    $('#constraintChangeAlert').hide();
                    
                    Swal.fire({
                        toast: true,
                        icon: 'info',
                        title: 'Changes canceled',
                        position: 'top',
                        showConfirmButton: false,
                        timer: 2000
                    });
                }
            });
        }

        function clearAllConstraints() {
            Swal.fire({
                title: 'Clear All Course Constraints?',
                text: "This will remove all 'Close' constraints for this course. This action cannot be undone!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, clear all constraints'
            }).then((result) => {
                if (result.isConfirmed) {
                    $('.spinner-overlay').css('display', 'flex');
                    
                    var courseData = {
                        CourseId: parseInt(currentCourseId)
                    };
                    
                    $.ajax({
                        url: '/Constraint/ClearAllCourseConstraints',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(courseData),
                        success: function(response) {
                            $('.spinner-overlay').hide();
                            
                            // Reset all constraint cells
                            $('.constraint-cell').each(function() {
                                $(this).css('background-color', 'rgb(255, 255, 255)');
                                $(this).text('');
                                $(this).attr('title', '');
                                $(this).attr('data-unsaved', 'false');
                            });
                            
                            // Reset tracking variables
                            constraintsToAdd = [];
                            constraintsToRemove = [];
                            hasUnsavedChanges = false;
                            $('#constraintChangeAlert').hide();
                            
                            Swal.fire({
                                toast: true,
                                icon: 'success',
                                title: 'All constraints cleared successfully!',
                                position: 'top',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        },
                        error: function(xhr, status, error) {
                            $('.spinner-overlay').hide();
                            console.error("AJAX Error:", status, error);
                            
                            var errorMessage = "An unknown error occurred while clearing constraints.";
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }
                            
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: errorMessage,
                            });
                        }
                    });
                }
            });
        }
    </script>

    <style>
        /* 'Closed' butonu Ã¼zerine gelince yazÄ± rengini beyaz yap */
        .constraint-option-button.btn-outline-danger:hover {
            color: white !important; 
        }
        
        /* Active class for constraint buttons */
        .constraint-option-button.active {
            box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5);
        }
    </style>
}