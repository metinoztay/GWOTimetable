@model Workspace
@using System.Text.Json;

@{
    // Cache frequently accessed data
    List<Day> days = Model.Days.ToList();
    List<Lesson> lessons = Model.Lessons.ToList();
    List<TimetableConstraint> timetableConstraints = Model.TimetableConstraints.ToList();
    List<ClassConstraint> classConstraints = Model.ClassConstraints.ToList();
    List<EducatorConstraint> educatorConstraints = Model.EducatorConstraints.ToList();
    List<ClassroomConstraint> classroomConstraints = Model.ClassroomConstraints.ToList();
    List<ClassCourse> classCourses = Model.ClassCourses.ToList();
    List<Course> courses = Model.Courses.ToList();

    int maxLessonCount = 0;
    foreach (var day in Model.Days)
    {
        if (day.LessonCount > maxLessonCount)
            maxLessonCount = day.LessonCount;
    }

    bool FindTimetableConstraint(int dayId, int lessonId)
    {
        return timetableConstraints.Any(tc => tc.DayId == dayId && tc.LessonId == lessonId) ||
               educatorConstraints.Any(e => e.DayId == dayId && e.LessonId == lessonId) ||
               classroomConstraints.Any(cr => cr.DayId == dayId && cr.LessonId == lessonId);
    }

    string GetConstraintInfo(int dayId, int lessonId)
    {
        var constraint = timetableConstraints.FirstOrDefault(tc => tc.DayId == dayId && tc.LessonId == lessonId);
        if (constraint != null)
        {
            var classCourse = classCourses.FirstOrDefault(cc => cc.ClassCourseId == constraint.ClassCourseId);
            if (classCourse != null)
            {
                var course = courses.FirstOrDefault(c => c.CourseId == classCourse.CourseId);
                if (course != null)
                {
                    return $"{course.CourseName}";
                }
                return $"Course not found for CourseId: {classCourse.CourseId}";
            }
            return $"ClassCourse not found for ClassCourseId: {constraint.ClassCourseId}";
        }
        return "No timetable constraint found";
    }

    bool FindClassConstraint(int dayId, int lessonId)
    {
        return classConstraints.Any(cc => cc.DayId == dayId && cc.LessonId == lessonId);
    }

    ConstraintDTO GetConstraintData(int dayId, int lessonId)
    {
        var constraint = new ConstraintDTO();

        var timetableConstraint = timetableConstraints.FirstOrDefault(tc => tc.DayId == dayId && tc.LessonId == lessonId);
        if (timetableConstraint != null)
        {
            var classCourse = classCourses.FirstOrDefault(cc => cc.ClassCourseId == timetableConstraint.ClassCourseId);
            if (classCourse != null)
            {
                constraint.ClassCourseId = classCourse.ClassCourseId;
                constraint.DayId = dayId;
                constraint.LessonId = lessonId;
            }
        }

        return constraint;
    }
    
    var classCoursesJson = JsonSerializer.Serialize(Model.ClassCourses.Select(cc => new
    {
        cc.ClassCourseId,
        cc.ClassId,
        cc.EducatorId,
        cc.ClassroomId,
        cc.CourseId,
        cc.Course.CourseName,
        cc.Course.CourseCode
    }));

    var coursesJson = JsonSerializer.Serialize(Model.Courses.Select(c => new
    {
        c.CourseId,
        c.CourseName,
        c.CourseCode
    }));
}

<div class="card-header d-flex align-items-center">
    <div class="d-flex w-100 justify-content-between">
        <h3 class="card-title"><i class="fas fa-calendar-days"></i>&nbsp; Schedule</h3>
        <span id="constraintChangeAlert" class="badge badge-warning ml-2" style="display: none; font-size: 0.9em; position: absolute; left: 50%; transform: translateX(-50%);">
            <i class="fas fa-exclamation-triangle"></i>&nbsp; You have unsaved changes
        </span>
        <div class="ml-auto">
            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="clearAllConstraints()">
                <i class="fa-solid fa-eraser"></i>&nbsp; Clear
            </button>
            <button type="button" id="saveConstraintsButton" class="btn btn-outline-success btn-sm" onclick="saveAllChanges()">
                <i class="fas fa-save"></i>&nbsp; Save Changes
            </button>
            <button type="button" id="cancelChangesButton" class="btn btn-outline-danger btn-sm" onclick="cancelChanges()">
                <i class="fas fa-undo"></i>&nbsp; Cancel
            </button>
        </div>
    </div>
</div>

<div class="card-body p-0">
    <table class="table table-bordered">
        <tr>
            <td style="width: 8%; text-align: center; vertical-align: middle;"></td>
            @foreach (var day in days)
            {
                if (day.LessonCount > 0)
                {
                    <td style="width: calc((100% - 8%) / @days.Count()); height: 50px; text-align: center; background-color: rgb(255, 255, 255);">
                        @day.DayOfWeek
                    </td>
                }
            }
        </tr>

        @for (int i = 0; i < maxLessonCount; i++)
        {
            <tr>
                <td style="width: 8%; text-align: center; vertical-align: middle;">
                    @(lessons[i].StartTime)-@(lessons[i].EndTime)
                </td>

                @for (int j = 0; j < Model.Days.Count(); j++)
                {
                    if (days[j].LessonCount > 0)
                    {
                        if (i < days[j].LessonCount)
                        {
                            @if (FindTimetableConstraint(days[j].DayId, lessons[i].LessonId))
                            {
                                <td style="width: calc((100% - 8%) / @Model.Days.Count()); height: 70px; background-color: #ADD8E6; cursor: pointer; text-align: center; vertical-align: middle;"
                                    data-day-id="@days[j].DayId" data-lesson-id="@lessons[i].LessonId" 
                                    data-constraint-data='@System.Text.Json.JsonSerializer.Serialize(GetConstraintData(days[j].DayId, lessons[i].LessonId))'
                                    ondblclick="RemoveConstraint(event, @days[j].DayId, @lessons[i].LessonId)">
                                    @GetConstraintInfo(days[j].DayId, lessons[i].LessonId)
                                </td>
                            }
                            else if (FindClassConstraint(days[j].DayId, lessons[i].LessonId))
                            {
                                <td style="width: calc((100% - 8%) / @Model.Days.Count()); height: 70px; background-color: #ffe6e6; cursor: pointer; text-align: center; vertical-align: middle;"
                                    data-day-id="@days[j].DayId" data-lesson-id="@lessons[i].LessonId"
                                    data-constraint-data='@System.Text.Json.JsonSerializer.Serialize(GetConstraintData(days[j].DayId, lessons[i].LessonId))'
                                    ondblclick="RemoveConstraint(event, @days[j].DayId, @lessons[i].LessonId)">
                                    Closed
                                </td>
                            }
                            else
                            {
                                <td style="width: calc((100% - 8%) / @Model.Days.Count()); height: 70px; cursor: pointer; text-align: center; vertical-align: middle;"
                                    data-day-id="@days[j].DayId" data-lesson-id="@lessons[i].LessonId"
                                    onclick="AddConstraint(event, @days[j].DayId, @lessons[i].LessonId)"
                                    onmouseover="this.style.background='#f5f5f5'"
                                    onmouseout="this.style.background='white'">
                                </td>
                            }
                        }
                    }
                }
            </tr>
        }
    </table>
</div>

<script>
    const classCoursesData = @Html.Raw(classCoursesJson);
    const coursesData = @Html.Raw(coursesJson);
    
    let hasUnsavedChanges = false;
    let addedConstraints = [];
    let removedConstraints = [];

    function AddConstraint(event, dayId, lessonId) {
        event.preventDefault();
        const classCourseId = selectedConstraintButton ? parseInt(selectedConstraintButton.data('classcourse-id')) : 0;
        
        var classData = {
            ClassId: currentClassId,
            ClassCourseId: classCourseId,
            DayId: dayId,
            LessonId: lessonId
        };

        $.ajax({
            url: '@Url.Action("AddConstraintForClass", "Constraint")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(classData),
            success: function (response) {
                if (response && response.success) {
                    RefreshConstraints();
                } else {
                    toastr.error(response?.message || 'Failed to add constraint');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error adding constraint:', error);
                toastr.error('Failed to add constraint');
            }
        });
    }

    function RemoveConstraint(event, dayId, lessonId) {
        event.preventDefault();
        const constraintData = $(event.target).data('constraint-data');
        if (!constraintData) return;

        var classData = {
            ClassId: currentClassId,
            ClassCourseId: constraintData.ClassCourseId,
            DayId: dayId,
            LessonId: lessonId
        };

        $.ajax({
            url: '@Url.Action("RemoveConstraintForClass", "Constraint")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(classData),
            success: function (response) {
                if (response && response.success) {
                    RefreshConstraints();
                } else {
                    toastr.error(response?.message || 'Failed to remove constraint');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error removing constraint:', error);
                toastr.error('Failed to remove constraint');
            }
        });
    }

    function saveAllChanges() {
        if (!hasUnsavedChanges) {
            return;
        }
        
        const changes = {
            ConstraintsToAdd: addedConstraints,
            ConstraintsToRemove: removedConstraints
        };

        $.ajax({
            url: '/Constraint/SaveAllConstraints',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(changes),
            success: function(response) {
                if (response && response.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Changes saved successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    let errorMessage = response?.message || 'Failed to save changes. Please try again.';
                    let errorDetails = '';
                    
                    if (response?.duplicateConstraints?.length > 0) {
                        errorDetails = 'Duplicate constraints found:\n' + 
                            response.duplicateConstraints.map(dc => 
                                `Day: ${dc.dayOfWeek}, Lesson: ${dc.lessonTime}`
                            ).join('\n');
                    }

                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: errorMessage,
                        ...(errorDetails && { footer: errorDetails })
                    });
                }
            },
            error: function(xhr, status, error) {
                let errorMessage = "An unknown error occurred. Please try again.";
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMessage = xhr.responseJSON.message;
                }
                
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: errorMessage
                });
            }
        });
    }

    function cancelChanges() {
        if (hasUnsavedChanges) {
            Swal.fire({
                title: 'Discard Changes?',
                text: "Are you sure you want to discard all unsaved changes?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, discard changes',
                cancelButtonText: 'No, keep editing'
            }).then((result) => {
                if (result.isConfirmed) {
                    location.reload();
                }
            });
        }
    }

    function clearAllConstraints() {
        Swal.fire({
            title: 'Clear All Constraints?',
            text: "Are you sure you want to clear all constraints? This action cannot be undone.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, clear all',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/Constraint/ClearAllConstraints',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        ClassId: selectedConstraintButton.data('class-id')
                    }),
                    success: function(response) {
                        if (response && response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'All constraints cleared successfully',
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response?.message || 'Failed to clear constraints. Please try again.'
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to clear constraints. Please try again.'
                        });
                    }
                });
            }
        });
    }
</script>
