@{
    // Cache frequently accessed data
    var daysList = Model.Days.ToList();
    var lessonsList = Model.Lessons.ToList();
    var timetableConstraints = Model.TimetableConstraints.ToList();
    var classConstraints = Model.ClassConstraints.ToList();
    var educatorConstraints = Model.EducatorConstraints.ToList();
    var classCourses = Model.ClassCourses.ToList();
    var courses = Model.Courses.ToList();
    
    int maxLessonCount = 0;
    foreach (var day in Model.Days)
    {
        if (day.LessonCount > maxLessonCount)
            maxLessonCount = day.LessonCount;
    }

    string GetConstraintInfo(int dayId, int lessonId)
    {
        var constraint = timetableConstraints.FirstOrDefault(tc => tc.DayId == dayId && tc.LessonId == lessonId);
        if (constraint != null)
        {
            var classCourse = classCourses.FirstOrDefault(cc => cc.ClassCourseId == constraint.ClassCourseId);
            if (classCourse != null)
            {
                var course = courses.FirstOrDefault(c => c.CourseId == classCourse.CourseId);
                if (course != null)
                {
                    return $"{course.CourseName}";
                }
                return $"Course not found";
            }
            return $"Class course not found";
        }

        var classConstraint = classConstraints.FirstOrDefault(cc => cc.DayId == dayId && cc.LessonId == lessonId);
        if (classConstraint != null)
        {
            return "Not Available (Class)";
        }

        var educatorConstraint = educatorConstraints.FirstOrDefault(ec => ec.DayId == dayId && ec.LessonId == lessonId);
        if (educatorConstraint != null)
        {
            return "Not Available (Educator)";
        }

        return "";
    }

    bool HasConstraint(int dayId, int lessonId)
    {
        return timetableConstraints.Any(tc => tc.DayId == dayId && tc.LessonId == lessonId) ||
               classConstraints.Any(cc => cc.DayId == dayId && cc.LessonId == lessonId) ||
               educatorConstraints.Any(ec => ec.DayId == dayId && ec.LessonId == lessonId);
    }

    bool IsSelectedCourseConstraint(int dayId, int lessonId)
    {
        if (ViewData["SelectedClassCourseId"] == null) return false;
        int selectedClassCourseId = (int)ViewData["SelectedClassCourseId"];
        return timetableConstraints.Any(tc => 
            tc.DayId == dayId && 
            tc.LessonId == lessonId && 
            tc.ClassCourseId == selectedClassCourseId);
    }

    bool IsClassConstraint(int dayId, int lessonId)
    {
        return classConstraints.Any(cc => cc.DayId == dayId && cc.LessonId == lessonId);
    }

    bool IsEducatorConstraint(int dayId, int lessonId)
    {
        if (ViewData["SelectedEducatorId"] == null) return false;
        int educatorId = (int)ViewData["SelectedEducatorId"];
        return educatorConstraints.Any(ec => 
            ec.DayId == dayId && 
            ec.LessonId == lessonId && 
            ec.EducatorId == educatorId);
    }
}

@model Workspace
<table class="table table-bordered">
    <tr>
        <td style="width: 8%; text-align: center; vertical-align: middle;"></td>
        @foreach (var day in daysList)
        {
            if (day.LessonCount > 0)
            {
                <td style="width: calc((100% - 8%) / @daysList.Count); height: 50px; text-align: center; background-color: rgb(255, 255, 255);">
                    @day.DayOfWeek
                </td>
            }
        }
    </tr>

    @for (int i = 0; i < maxLessonCount; i++)
    {
        <tr>
            <td style="width: 8%; text-align: center; vertical-align: middle;">
                @(lessonsList[i].StartTime)-@(lessonsList[i].EndTime)
            </td>

            @for (int j = 0; j < daysList.Count; j++)
            {
                if (daysList[j].LessonCount > 0)
                {
                    if (i < daysList[j].LessonCount)
                    {
                        @if (HasConstraint(daysList[j].DayId, lessonsList[i].LessonId))
                        {
                            var bgColor = IsSelectedCourseConstraint(daysList[j].DayId, lessonsList[i].LessonId) ? "#4CAF50" : 
                                        IsClassConstraint(daysList[j].DayId, lessonsList[i].LessonId) ? "#FF6B6B" :
                                        IsEducatorConstraint(daysList[j].DayId, lessonsList[i].LessonId) ? "#FFA500" : "#ADD8E6";
                            <td style="width: calc((100% - 8%) / @daysList.Count); height: 70px; background-color: @bgColor; cursor: pointer; text-align: center; vertical-align: middle;"
                                ondblclick="RemoveConstraint(event, @daysList[j].DayId, @lessonsList[i].LessonId)">
                                @GetConstraintInfo(daysList[j].DayId, lessonsList[i].LessonId)
                            </td>
                        }
                        else
                        {
                            <td style="width: calc((100% - 8%) / @daysList.Count); height: 70px; cursor: pointer; text-align: center; vertical-align: middle;"
                                onclick="AddConstraint(event, @daysList[j].DayId, @lessonsList[i].LessonId)"
                                onmouseover="this.style.background='#f5f5f5'" onmouseout="this.style.background='white'">
                            </td>
                        }
                    }
                    else
                    {
                        <td style="width: calc((100% - 8%) / @daysList.Count); height: 70px; background-color: #ccc; opacity: 0.5; pointer-events: none;"></td>
                    }
                }
            }
        </tr>
    }
</table>
