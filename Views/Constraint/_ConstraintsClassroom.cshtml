@model Workspace
@using System.Text.Json;

@{
    // Cache frequently accessed data
    List<Day> days = Model.Days.ToList();
    List<Lesson> lessons = Model.Lessons.ToList();
    List<TimetableConstraint> timetableConstraints = Model.TimetableConstraints.ToList();
    List<ClassConstraint> classConstraints = Model.ClassConstraints.ToList();
    List<EducatorConstraint> educatorConstraints = Model.EducatorConstraints.ToList();
    List<ClassroomConstraint> classroomConstraints = Model.ClassroomConstraints.ToList();
    List<ClassCourse> classCourses = Model.ClassCourses.ToList();
    List<Course> courses = Model.Courses.ToList();

    int maxLessonCount = 0;
    foreach (var day in Model.Days)
    {
        if (day.LessonCount > maxLessonCount)
            maxLessonCount = day.LessonCount;
    }

    bool FindTimetableConstraint(int dayId, int lessonId)
    {
        return timetableConstraints.Any(tc => tc.DayId == dayId && tc.LessonId == lessonId) ||
               educatorConstraints.Any(e => e.DayId == dayId && e.LessonId == lessonId) ||
               classConstraints.Any(c => c.DayId == dayId && c.LessonId == lessonId);
    }

    string GetConstraintInfo(int dayId, int lessonId)
    {
        // Check for timetable constraint
        var timetableConstraint = timetableConstraints.FirstOrDefault(tc => tc.DayId == dayId && tc.LessonId == lessonId);
        if (timetableConstraint != null)
        {
            var classCourse = classCourses.FirstOrDefault(cc => cc.ClassCourseId == timetableConstraint.ClassCourseId);
            if (classCourse != null)
            {
                var course = courses.FirstOrDefault(c => c.CourseId == classCourse.CourseId);
                if (course != null)
                {
                    return $"{course.CourseName}";
                }
                return $"Course not found for CourseId: {classCourse.CourseId}";
            }
            return $"ClassCourse not found for ClassCourseId: {timetableConstraint.ClassCourseId}";
        }

        // Check for educator constraint
        var educatorConstraint = educatorConstraints.FirstOrDefault(ec => ec.DayId == dayId && ec.LessonId == lessonId);
        if (educatorConstraint != null)
        {
            return "Educator not available";
        }

        // Check for class constraint
        var classConstraint = classConstraints.FirstOrDefault(cc => cc.DayId == dayId && cc.LessonId == lessonId);
        if (classConstraint != null)
        {
            return "Class not available";
        }

        return "No constraint found";
    }

    bool FindClassroomConstraint(int dayId, int lessonId)
    {
        return classroomConstraints.Any(cr => cr.DayId == dayId && cr.LessonId == lessonId);
    }

    ConstraintDTO GetConstraintData(int dayId, int lessonId)
    {
        var constraint = new ConstraintDTO
        {
            DayId = dayId,
            LessonId = lessonId
        };

        // Check for timetable constraint
        var timetableConstraint = timetableConstraints.FirstOrDefault(tc => tc.DayId == dayId && tc.LessonId == lessonId);
        if (timetableConstraint != null)
        {
            var classCourse = classCourses.FirstOrDefault(cc => cc.ClassCourseId == timetableConstraint.ClassCourseId);
            if (classCourse != null)
            {
                constraint.ClassCourseId = classCourse.ClassCourseId;
                constraint.ClassId = classCourse.ClassId;
                constraint.EducatorId = classCourse.EducatorId;
                constraint.ClassroomId = classCourse.ClassroomId;
            }
            return constraint;
        }
        
        // Check for educator constraint
        var educatorConstraint = educatorConstraints.FirstOrDefault(ec => ec.DayId == dayId && ec.LessonId == lessonId);
        if (educatorConstraint != null)
        {
            constraint.EducatorId = educatorConstraint.EducatorId;
            constraint.ClassCourseId = 0;
            return constraint;
        }
        
        // Check for class constraint
        var classConstraint = classConstraints.FirstOrDefault(cc => cc.DayId == dayId && cc.LessonId == lessonId);
        if (classConstraint != null)
        {
            constraint.ClassId = classConstraint.ClassId;
            constraint.ClassCourseId = 0;
            return constraint;
        }
        
        // Check for classroom constraint
        var classroomConstraint = classroomConstraints.FirstOrDefault(cr => cr.DayId == dayId && cr.LessonId == lessonId);
        if (classroomConstraint != null)
        {
            constraint.ClassroomId = classroomConstraint.ClassroomId;
            constraint.ClassCourseId = 0;
            return constraint;
        }

        return constraint;
    }
    
    var classCoursesJson = JsonSerializer.Serialize(Model.ClassCourses.Select(cc => new
    {
        cc.ClassCourseId,
        cc.ClassId,
        cc.EducatorId,
        cc.ClassroomId,
        cc.CourseId,
        cc.Course.CourseName,
        cc.Course.CourseCode
    }));

    var coursesJson = JsonSerializer.Serialize(Model.Courses.Select(c => new
    {
        c.CourseId,
        c.CourseName,
        c.CourseCode
    }));
}

<style>
    .spinner-overlay {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }
    
    .spinner-container {
        position: relative;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }
</style>

<div class="spinner-container">
    <div class="spinner-overlay">
        <div class="spinner-border" role="status">
        </div>
    </div>
    <div class="card-header d-flex align-items-center">
        <div class="d-flex w-100 justify-content-between">
            <h3 class="card-title"><i class="fas fa-calendar-days"></i>&nbsp; Schedule</h3>
            <span id="constraintChangeAlert" class="badge badge-warning ml-2" style="display: none; font-size: 0.9em; position: absolute; left: 50%; transform: translateX(-50%);">
                <i class="fas fa-exclamation-triangle"></i>&nbsp; You have unsaved changes
            </span>
            <div class="ml-auto">
                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="clearAllConstraints()">
                    <i class="fa-solid fa-eraser"></i>&nbsp; Clear
                </button>
                <button type="button" id="saveConstraintsButton" class="btn btn-outline-success btn-sm" onclick="saveAllChanges()">
                    <i class="fas fa-save"></i>&nbsp; Save Changes
                </button>
                <button type="button" id="cancelChangesButton" class="btn btn-outline-danger btn-sm" onclick="cancelChanges()">
                    <i class="fas fa-undo"></i>&nbsp; Cancel
                </button>
            </div>
        </div>
    </div>

    <div class="card-body p-0">
        <table class="table table-bordered">
            <tr>
                <td style="width: 8%; text-align: center; vertical-align: middle;"></td>
                @foreach (var day in days)
                {
                    if (day.LessonCount > 0)
                    {
                        <td style="width: calc((100% - 8%) / @days.Count()); height: 50px; text-align: center; background-color: rgb(255, 255, 255);">
                            @day.DayOfWeek
                        </td>
                    }
                }
            </tr>

            @for (int i = 0; i < maxLessonCount; i++)
            {
                <tr>
                    <td style="width: 8%; text-align: center; vertical-align: middle;">
                        @(lessons[i].StartTime)-@(lessons[i].EndTime)
                    </td>
                    @foreach (var day in days)
                    {
                        if (day.LessonCount > 0)
                        {
                            if (i < day.LessonCount)
                            {
                                @if (FindClassroomConstraint(day.DayId, lessons[i].LessonId))
                                {
                                    // Mevcut constraint var - kırmızı arkaplan
                                    <td onclick="RemoveConstraintLocal(this, @day.DayId, @lessons[i].LessonId)"
                                        onmouseover="this.style.cursor='pointer'; this.style.opacity='0.8';"
                                        onmouseout="this.style.opacity='1';"
                                        style="background-color: #ffe6e6; text-align: center; padding: 2px; height: 50px; position: relative;"
                                        data-constraint-data="@Json.Serialize(GetConstraintData(day.DayId, lessons[i].LessonId))">
                                        <div style="font-weight: bold; font-size: 0.9em;">Classroom Not Available</div>
                                    </td>
                                }
                                else if (FindTimetableConstraint(day.DayId, lessons[i].LessonId))
                                {
                                    // Başka bir constraint var - mavi arkaplan veya farklı renk
                                    <td style="background-color: #ADD8E6; text-align: center; padding: 2px; height: 50px;">
                                        <div style="font-weight: bold; font-size: 0.9em;">@GetConstraintInfo(day.DayId, lessons[i].LessonId)</div>
                                    </td>
                                }
                                else
                                {
                                    // Boş hücre - constraint eklenebilir
                                    <td onclick="AddConstraintLocal(this, @day.DayId, @lessons[i].LessonId)"
                                        onmouseover="this.style.cursor='pointer'; this.style.backgroundColor='#f5f5f5';"
                                        onmouseout="this.style.backgroundColor='white';"
                                        style="background-color: white; text-align: center; padding: 2px; height: 50px;">
                                    </td>
                                }
                            }
                            else
                            {
                                <td style="background-color: #f0f0f0; text-align: center; height: 50px;"></td>
                            }
                        }
                    }
                </tr>
            }
        </table>
    </div>
</div>

<script>
    var classCoursesData = @Html.Raw(classCoursesJson);
    var coursesData = @Html.Raw(coursesJson);
    
    var constraintsToAdd = [];
    var constraintsToRemove = [];
    var hasUnsavedChanges = false;
    var currentClassroomId = 0; // Will be set by the classroom details page
    
    function updateChangeIndicator() {
        const hasChanges = constraintsToAdd.length > 0 || constraintsToRemove.length > 0;
        
        if (hasChanges && !hasUnsavedChanges) {
            $('#constraintChangeAlert').fadeIn();
            hasUnsavedChanges = true;
        } else if (!hasChanges && hasUnsavedChanges) {
            $('#constraintChangeAlert').fadeOut();
            hasUnsavedChanges = false;
        }
    }
    
    // Yerel olarak constraint ekleme
    window.AddConstraintLocal = function(element, dayId, lessonId) {
        console.log("AddConstraintLocal called for day:", dayId, "lesson:", lessonId);
        
        // ClassCourseId = 0 çünkü bu bir "kapalı" constraint olacak (ClassCourseId = 0)
        var constraint = {
            ClassroomId: currentClassroomId,
            DayId: dayId,
            LessonId: lessonId,
            ClassCourseId: 0  // 0 means it's a "closed" constraint, not a course assignment
        };
        
        // Eğer zaten bir constraint ile işaretlendiyse (unsaved), işlem yapma
        if ($(element).attr('data-unsaved') === 'true') {
            return;
        }
        
        // Eğer zaten bir constraint silindiyse, onun için olan kaydı kaldır
        const existsInRemove = constraintsToRemove.findIndex(item => 
            item.DayId === dayId && item.LessonId === lessonId && item.ClassroomId === currentClassroomId
        );
        
        if (existsInRemove !== -1) {
            constraintsToRemove.splice(existsInRemove, 1);
            
            // Sadece bir unsaved constraint'i kaldırdık, hücreyi normal hale getir
            $(element).removeAttr('data-unsaved');
            $(element).removeAttr('data-removed-constraint');
            $(element).css('background-color', '#ffe6e6'); // Restore original color
            $(element).html('<div style="font-weight: bold; font-size: 0.9em;">Classroom Not Available</div>');
            
            // onClick, onHover event'leri eski haline getir
            $(element).attr('onclick', `RemoveConstraintLocal(this, ${dayId}, ${lessonId})`);
            $(element).attr('onmouseover', "this.style.cursor='pointer'; this.style.opacity='0.8';");
            $(element).attr('onmouseout', "this.style.opacity='1';");
        } else {
            // constraintsToAdd listesinde zaten yoksa ekle
            const existsInAdd = constraintsToAdd.some(item => 
                item.DayId === dayId && item.LessonId === lessonId && item.ClassroomId === currentClassroomId
            );
            
            if (!existsInAdd) {
                constraintsToAdd.push(constraint);
                
                // Yeni constraint eklediğimizi göstermek için hücre stilini değiştir
                $(element).attr('data-unsaved', 'true');
                $(element).css('background-color', '#FFD700'); // Gold color for unsaved "closed" constraints
                $(element).html('<div style="font-weight: bold; font-size: 0.9em;">Classroom Not Available</div>');
                
                // onClick event'i değiştir, artık RemoveConstraintLocal'ı çağırsın
                $(element).attr('onclick', `RemoveConstraintLocal(this, ${dayId}, ${lessonId})`);
                
                // Hover effect'i değiştir
                $(element).attr('onmouseover', "this.style.cursor='pointer'; this.style.opacity='0.8';");
                $(element).attr('onmouseout', "this.style.opacity='1';");
                
                // Constraint verisini hücreye ekle
                $(element).attr('data-constraint-data', JSON.stringify(constraint));
            }
        }
        
        updateChangeIndicator();
    };
    
    // Yerel olarak constraint kaldırma
    window.RemoveConstraintLocal = function(element, dayId, lessonId) {
        console.log("RemoveConstraintLocal called for day:", dayId, "lesson:", lessonId);
        
        var constraintData = {};
        try {
            constraintData = JSON.parse($(element).attr('data-constraint-data'));
        } catch (e) {
            console.error("Error parsing constraint data:", e);
            // Fallback to creating a new constraint object
            constraintData = {
                ClassroomId: currentClassroomId,
                DayId: dayId,
                LessonId: lessonId,
                ClassCourseId: 0
            };
        }
        
        // Eğer zaten bir unsaved constraint ise, sadece onu kaldır
        if ($(element).attr('data-unsaved') === 'true') {
            const index = constraintsToAdd.findIndex(item => 
                item.DayId === dayId && item.LessonId === lessonId && item.ClassroomId === currentClassroomId
            );
            
            if (index !== -1) {
                constraintsToAdd.splice(index, 1);
                
                // Hücreyi yeniden boş haline getir
                $(element).removeAttr('data-unsaved');
                $(element).css('background-color', 'white');
                $(element).empty();
                
                // onClick handler'ı AddConstraintLocal'a değiştir
                $(element).attr('onclick', `AddConstraintLocal(this, ${dayId}, ${lessonId})`);
                
                // Hover efektini değiştir
                $(element).attr('onmouseover', "this.style.cursor='pointer'; this.style.backgroundColor='#f5f5f5';");
                $(element).attr('onmouseout', "this.style.backgroundColor='white';");
                
                // Constraint verisini temizle
                $(element).removeAttr('data-constraint-data');
            }
        } else {
            // Mevcut bir constraint, silinecek olarak işaretle
            const existsInRemove = constraintsToRemove.some(item => 
                item.DayId === dayId && item.LessonId === lessonId && item.ClassroomId === currentClassroomId
            );
            
            if (!existsInRemove) {
                constraintsToRemove.push(constraintData);
                
                // Silindi olarak işaretle
                $(element).attr('data-unsaved', 'true');
                $(element).attr('data-removed-constraint', 'true');
                $(element).css('background-color', '#f5f5f5'); // Gri arka plan, silindi olarak göstermek için
                $(element).html('<div style="font-weight: bold; font-size: 0.9em; color: #999;"><i class="fas fa-ban"></i> Marked for Removal</div>');
                
                // onClick handler'ı AddConstraintLocal'a değiştir
                $(element).attr('onclick', `AddConstraintLocal(this, ${dayId}, ${lessonId})`);
                
                // Hover efektini değiştir
                $(element).attr('onmouseover', "this.style.cursor='pointer';");
                $(element).attr('onmouseout', "");
            }
        }
        
        updateChangeIndicator();
    };
    
    // Tüm değişiklikleri kaydet
    window.saveAllChanges = function() {
        if (!hasUnsavedChanges) {
            return;
        }
        
        console.log("Saving changes...");
        console.log("Constraints to add:", constraintsToAdd);
        console.log("Constraints to remove:", constraintsToRemove);
        
        // Loading spinner'ı göster
        $('.spinner-overlay').css('display', 'flex');
        
        // Değişiklikleri sunucuya gönder
        const changes = {
            ClassroomId: currentClassroomId,
            ConstraintsToAdd: constraintsToAdd,
            ConstraintsToRemove: constraintsToRemove
        };
        
        $.ajax({
            url: '/Constraint/SaveAllClassroomConstraints',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(changes),
            success: function(response) {
                $('.spinner-overlay').hide();
                
                if (response.success) {
                    // Başarılı kayıt mesajı
                    Swal.fire({
                        icon: 'success',
                        title: 'Saved!',
                        text: response.message || 'Changes saved successfully',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000
                    });
                    
                    // Tüm hücreleri normal görünüme resetle
                    $('td[data-unsaved="true"]').each(function() {
                        const $cell = $(this);
                        if ($cell.attr('data-removed-constraint') === 'true') {
                            // Silinen constraint - beyaz arka plan
                            $cell.removeAttr('data-unsaved');
                            $cell.removeAttr('data-removed-constraint');
                            $cell.css('background-color', 'white');
                            $cell.empty();
                            
                            // onClick handler'ı değiştir
                            const dayId = parseInt($cell.attr('onclick').match(/\d+/g)[1]);
                            const lessonId = parseInt($cell.attr('onclick').match(/\d+/g)[2]);
                            $cell.attr('onclick', `AddConstraintLocal(this, ${dayId}, ${lessonId})`);
                            
                            // Hover efektini değiştir
                            $cell.attr('onmouseover', "this.style.cursor='pointer'; this.style.backgroundColor='#f5f5f5';");
                            $cell.attr('onmouseout', "this.style.backgroundColor='white';");
                            
                            // Constraint verisini temizle
                            $cell.removeAttr('data-constraint-data');
                        } else {
                            // Eklenen constraint - normal constraint rengine dönüştür
                            $cell.removeAttr('data-unsaved');
                            $cell.css('background-color', '#ffe6e6');
                            
                            // onclick ve hover efektlerini ayarla
                            const dayId = parseInt($cell.attr('onclick').match(/\d+/g)[1]);
                            const lessonId = parseInt($cell.attr('onclick').match(/\d+/g)[2]);
                            $cell.attr('onclick', `RemoveConstraintLocal(this, ${dayId}, ${lessonId})`);
                            $cell.attr('onmouseover', "this.style.cursor='pointer'; this.style.opacity='0.8';");
                            $cell.attr('onmouseout', "this.style.opacity='1';");
                        }
                    });
                    
                    // Listeleri temizle
                    constraintsToAdd = [];
                    constraintsToRemove = [];
                    
                    // Değişiklik göstergesini güncelle
                    updateChangeIndicator();
                } else {
                    // Hata mesajı
                    let errorText = response.message || 'An error occurred while saving changes';
                    
                    if (response.errors && response.errors.length > 0) {
                        errorText += '<br><ul>';
                        response.errors.forEach(error => {
                            errorText += `<li>${error}</li>`;
                        });
                        errorText += '</ul>';
                    }
                    
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        html: errorText,
                        confirmButtonText: 'OK'
                    });
                }
            },
            error: function(xhr, status, error) {
                $('.spinner-overlay').hide();
                console.error("AJAX error:", status, error);
                
                // XHR response and error details
                let errorMessage = "An error occurred while saving changes. Please try again.";
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMessage = xhr.responseJSON.message;
                }
                
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: errorMessage,
                    confirmButtonText: 'OK'
                });
            }
        });
    };
    
    // Değişiklikleri iptal etme
    window.cancelChanges = function() {
        if (!hasUnsavedChanges) {
            return;
        }
        
        // Confirm cancellation
        Swal.fire({
            title: 'Cancel Changes?',
            text: "All unsaved changes will be lost. Are you sure?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, cancel changes',
            cancelButtonText: 'No, keep editing'
        }).then((result) => {
            if (result.isConfirmed) {
                console.log("Cancelling changes");
                
                // Reset all unsaved cells
                $('td[data-unsaved="true"]').each(function() {
                    const $cell = $(this);
                    if ($cell.attr('data-removed-constraint') === 'true') {
                        // Restore the removed constraint to its original state
                        $cell.removeAttr('data-unsaved');
                        $cell.removeAttr('data-removed-constraint');
                        $cell.css('background-color', '#ffe6e6');
                        $cell.html('<div style="font-weight: bold; font-size: 0.9em;">Classroom Not Available</div>');
                        
                        // Restore click handler
                        const dayId = parseInt($cell.attr('onclick').match(/\d+/g)[1]);
                        const lessonId = parseInt($cell.attr('onclick').match(/\d+/g)[2]);
                        $cell.attr('onclick', `RemoveConstraintLocal(this, ${dayId}, ${lessonId})`);
                        
                        // Restore hover effects
                        $cell.attr('onmouseover', "this.style.cursor='pointer'; this.style.opacity='0.8';");
                        $cell.attr('onmouseout', "this.style.opacity='1';");
                    } else {
                        // Remove newly added constraint
                        $cell.removeAttr('data-unsaved');
                        $cell.css('background-color', 'white');
                        $cell.empty();
                        
                        // Restore click handler
                        const dayId = parseInt($cell.attr('onclick').match(/\d+/g)[1]);
                        const lessonId = parseInt($cell.attr('onclick').match(/\d+/g)[2]);
                        $cell.attr('onclick', `AddConstraintLocal(this, ${dayId}, ${lessonId})`);
                        
                        // Restore hover effects
                        $cell.attr('onmouseover', "this.style.cursor='pointer'; this.style.backgroundColor='#f5f5f5';");
                        $cell.attr('onmouseout', "this.style.backgroundColor='white';");
                        
                        // Remove constraint data
                        $cell.removeAttr('data-constraint-data');
                    }
                });
                
                // Clear constraint lists
                constraintsToAdd = [];
                constraintsToRemove = [];
                
                // Update indicator
                updateChangeIndicator();
                
                // Show notification
                Swal.fire({
                    icon: 'info',
                    title: 'Changes Cancelled',
                    text: 'All unsaved changes have been discarded',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000
                });
            }
        });
    };

    // Tüm kısıtlamaları temizleme
    window.clearAllConstraints = function() {
        Swal.fire({
            title: 'Clear All Classroom Constraints?',
            text: "This will remove all 'Closed' constraints for this classroom. This action cannot be undone!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, clear all',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                // Show spinner
                $('.spinner-overlay').css('display', 'flex');
                
                // Send the request to the server
                $.ajax({
                    url: '/Constraint/ClearAllClassroomConstraints',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(currentClassroomId),
                    success: function(response) {
                        $('.spinner-overlay').hide();
                        
                        if (response.success) {
                            // Success message
                            Swal.fire({
                                icon: 'success',
                                title: 'Constraints Cleared',
                                text: response.message || 'All constraints have been cleared successfully',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                // Reload constraint table to reflect the changes
                                RefreshConstraints();
                            });
                        } else {
                            // Error message
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.message || 'An error occurred while clearing constraints',
                                confirmButtonText: 'OK'
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        $('.spinner-overlay').hide();
                        
                        // Error handling
                        let errorMessage = "An error occurred while clearing constraints. Please try again.";
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: errorMessage,
                            confirmButtonText: 'OK'
                        });
                    }
                });
            }
        });
    };
</script>
